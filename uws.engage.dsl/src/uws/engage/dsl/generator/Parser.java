/*
 * generated by Xtext
 */
package uws.engage.dsl.generator;
import uws.engage.dsl.generator.ParseResult;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.validation.CheckMode;
import org.eclipse.xtext.validation.IResourceValidator;
import org.eclipse.xtext.validation.Issue;

import uws.engage.dsl.AssessStandaloneSetup;
//import uws.engage.dsl.assess.Model;










import uws.engage.dsl.assess.Model;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;

public class Parser {
	
	public static ParseResult parse(String input) throws IOException {

		Injector injector = new uws.engage.dsl.AssessStandaloneSetup().createInjectorAndDoEMFRegistration();
		Parser parser= injector.getInstance(Parser.class);
		return parser.run(input);
	}
	
	@Inject 
	private Provider<ResourceSet> resourceSetProvider;
	
	@Inject
	private IResourceValidator validator;
	
	
	public ParseResult run(String input) throws IOException {
		ParseResult p = new ParseResult();
		
		ResourceSet set = resourceSetProvider.get();
		Resource resource = set.createResource(URI.createURI("file:/example.assess"));	
		InputStream in = new ByteArrayInputStream(input.getBytes());
		resource.load(in, set.getLoadOptions());
		p.model = (Model) resource.getContents().get(0);
		p.issues = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl);
		return p;
		
	}
	
}
