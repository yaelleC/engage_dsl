/*
* generated by Xtext
*/
grammar InternalAssess;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package uws.engage.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uws.engage.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uws.engage.dsl.services.AssessGrammarAccess;

}

@parser::members {

 	private AssessGrammarAccess grammarAccess;
 	
    public InternalAssessParser(TokenStream input, AssessGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected AssessGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGameGameDescriptionParserRuleCall_0_0()); 
	    }
		lv_game_0_0=ruleGameDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"game",
        		lv_game_0_0, 
        		"GameDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPlayerPlayerDescriptionParserRuleCall_1_0()); 
	    }
		lv_player_1_0=rulePlayerDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"player",
        		lv_player_1_0, 
        		"PlayerDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getLearningOutcomesLearningOutcomesParserRuleCall_2_0()); 
	    }
		lv_learningOutcomes_2_0=ruleLearningOutcomes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"learningOutcomes",
        		lv_learningOutcomes_2_0, 
        		"LearningOutcomes");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getFeedbackMessagesFeedbackMessagesParserRuleCall_3_0()); 
	    }
		lv_feedbackMessages_3_0=ruleFeedbackMessages		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"feedbackMessages",
        		lv_feedbackMessages_3_0, 
        		"FeedbackMessages");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getEvidenceModelEvidenceModelParserRuleCall_4_0()); 
	    }
		lv_evidenceModel_4_0=ruleEvidenceModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"evidenceModel",
        		lv_evidenceModel_4_0, 
        		"EvidenceModel");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getFeedbackModelFeedbackModelParserRuleCall_5_0()); 
	    }
		lv_feedbackModel_5_0=ruleFeedbackModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"feedbackModel",
        		lv_feedbackModel_5_0, 
        		"FeedbackModel");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getBadgeModelBadgeModelParserRuleCall_6_0()); 
	    }
		lv_badgeModel_6_0=ruleBadgeModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"badgeModel",
        		lv_badgeModel_6_0, 
        		"BadgeModel");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEnd
entryRuleEnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndRule()); } 
	 iv_ruleEnd=ruleEnd 
	 { $current=$iv_ruleEnd.current.getText(); }  
	 EOF 
;

// Rule End
ruleEnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='End' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndAccess().getEndKeyword()); 
    }

    ;







// Entry rule entryRuleSeparator
entryRuleSeparator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSeparatorRule()); } 
	 iv_ruleSeparator=ruleSeparator 
	 { $current=$iv_ruleSeparator.current.getText(); }  
	 EOF 
;

// Rule Separator
ruleSeparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSeparatorAccess().getColonKeyword()); 
    }

    ;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_simpleType_0_1=	'Int' 
    {
        newLeafNode(lv_simpleType_0_1, grammarAccess.getTypeAccess().getSimpleTypeIntKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "simpleType", lv_simpleType_0_1, null);
	    }

    |		lv_simpleType_0_2=	'Float' 
    {
        newLeafNode(lv_simpleType_0_2, grammarAccess.getTypeAccess().getSimpleTypeFloatKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "simpleType", lv_simpleType_0_2, null);
	    }

    |		lv_simpleType_0_3=	'String' 
    {
        newLeafNode(lv_simpleType_0_3, grammarAccess.getTypeAccess().getSimpleTypeStringKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "simpleType", lv_simpleType_0_3, null);
	    }

    |		lv_simpleType_0_4=	'Bool' 
    {
        newLeafNode(lv_simpleType_0_4, grammarAccess.getTypeAccess().getSimpleTypeBoolKeyword_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "simpleType", lv_simpleType_0_4, null);
	    }

    |		lv_simpleType_0_5=	'Char' 
    {
        newLeafNode(lv_simpleType_0_5, grammarAccess.getTypeAccess().getSimpleTypeCharKeyword_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "simpleType", lv_simpleType_0_5, null);
	    }

    |		lv_simpleType_0_6=	'Text' 
    {
        newLeafNode(lv_simpleType_0_6, grammarAccess.getTypeAccess().getSimpleTypeTextKeyword_0_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed($current, "simpleType", lv_simpleType_0_6, null);
	    }

)

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getEnumTypeEnumParserRuleCall_1_0()); 
	    }
		lv_enumType_1_0=ruleEnum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"enumType",
        		lv_enumType_1_0, 
        		"Enum");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	 iv_ruleEnum=ruleEnum 
	 { $current=$iv_ruleEnum.current; } 
	 EOF 
;

// Rule Enum
ruleEnum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumAccess().getEnumKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_enumValues_2_0=RULE_STRING
		{
			newLeafNode(lv_enumValues_2_0, grammarAccess.getEnumAccess().getEnumValuesSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"enumValues",
        		lv_enumValues_2_0, 
        		"STRING");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumAccess().getCommaKeyword_3_0());
    }
(
(
		lv_enumValues_4_0=RULE_STRING
		{
			newLeafNode(lv_enumValues_4_0, grammarAccess.getEnumAccess().getEnumValuesSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"enumValues",
        		lv_enumValues_4_0, 
        		"STRING");
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEnumAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleGameDescription
entryRuleGameDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGameDescriptionRule()); }
	 iv_ruleGameDescription=ruleGameDescription 
	 { $current=$iv_ruleGameDescription.current; } 
	 EOF 
;

// Rule GameDescription
ruleGameDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Serious-game' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGameDescriptionAccess().getSeriousGameKeyword_0_0());
    }

    |	otherlv_1='Game' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGameDescriptionAccess().getGameKeyword_0_1());
    }
)	otherlv_2='SGname' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGameDescriptionAccess().getSGnameKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getGameDescriptionAccess().getSeparatorParserRuleCall_2()); 
    }
ruleSeparator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_4_0=RULE_STRING
		{
			newLeafNode(lv_name_4_0, grammarAccess.getGameDescriptionAccess().getNameSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGameDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"STRING");
	    }

)
)	otherlv_5='SGdeveloper' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGameDescriptionAccess().getSGdeveloperKeyword_4());
    }

    { 
        newCompositeNode(grammarAccess.getGameDescriptionAccess().getSeparatorParserRuleCall_5()); 
    }
ruleSeparator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_dev_7_0=RULE_INT
		{
			newLeafNode(lv_dev_7_0, grammarAccess.getGameDescriptionAccess().getDevINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGameDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dev",
        		lv_dev_7_0, 
        		"INT");
	    }

)
)(	otherlv_8='SGdesc' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getGameDescriptionAccess().getSGdescKeyword_7_0());
    }

    { 
        newCompositeNode(grammarAccess.getGameDescriptionAccess().getSeparatorParserRuleCall_7_1()); 
    }
ruleSeparator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_desc_10_0=RULE_STRING
		{
			newLeafNode(lv_desc_10_0, grammarAccess.getGameDescriptionAccess().getDescSTRINGTerminalRuleCall_7_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGameDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"desc",
        		lv_desc_10_0, 
        		"STRING");
	    }

)
))?(	otherlv_11='SGageRange' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getGameDescriptionAccess().getSGageRangeKeyword_8_0());
    }

    { 
        newCompositeNode(grammarAccess.getGameDescriptionAccess().getSeparatorParserRuleCall_8_1()); 
    }
ruleSeparator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGameDescriptionAccess().getAgeRangeAgeParserRuleCall_8_2_0()); 
	    }
		lv_ageRange_13_0=ruleAge		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGameDescriptionRule());
	        }
       		set(
       			$current, 
       			"ageRange",
        		lv_ageRange_13_0, 
        		"Age");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_14='SGlanguage' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getGameDescriptionAccess().getSGlanguageKeyword_9_0());
    }

    { 
        newCompositeNode(grammarAccess.getGameDescriptionAccess().getSeparatorParserRuleCall_9_1()); 
    }
ruleSeparator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_lang_16_0=RULE_ID
		{
			newLeafNode(lv_lang_16_0, grammarAccess.getGameDescriptionAccess().getLangIDTerminalRuleCall_9_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGameDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lang",
        		lv_lang_16_0, 
        		"ID");
	    }

)
))?(	otherlv_17='SGcountry' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getGameDescriptionAccess().getSGcountryKeyword_10_0());
    }

    { 
        newCompositeNode(grammarAccess.getGameDescriptionAccess().getSeparatorParserRuleCall_10_1()); 
    }
ruleSeparator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_country_19_0=RULE_ID
		{
			newLeafNode(lv_country_19_0, grammarAccess.getGameDescriptionAccess().getCountryIDTerminalRuleCall_10_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGameDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"country",
        		lv_country_19_0, 
        		"ID");
	    }

)
))?(	otherlv_20='SGgenre' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getGameDescriptionAccess().getSGgenreKeyword_11_0());
    }

    { 
        newCompositeNode(grammarAccess.getGameDescriptionAccess().getSeparatorParserRuleCall_11_1()); 
    }
ruleSeparator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_genre_22_0=RULE_STRING
		{
			newLeafNode(lv_genre_22_0, grammarAccess.getGameDescriptionAccess().getGenreSTRINGTerminalRuleCall_11_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGameDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"genre",
        		lv_genre_22_0, 
        		"STRING");
	    }

)
))?(	otherlv_23='SGsubject' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getGameDescriptionAccess().getSGsubjectKeyword_12_0());
    }

    { 
        newCompositeNode(grammarAccess.getGameDescriptionAccess().getSeparatorParserRuleCall_12_1()); 
    }
ruleSeparator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_subject_25_0=RULE_STRING
		{
			newLeafNode(lv_subject_25_0, grammarAccess.getGameDescriptionAccess().getSubjectSTRINGTerminalRuleCall_12_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGameDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"subject",
        		lv_subject_25_0, 
        		"STRING");
	    }

)
))?(	otherlv_26='SGpublic' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getGameDescriptionAccess().getSGpublicKeyword_13_0());
    }

    { 
        newCompositeNode(grammarAccess.getGameDescriptionAccess().getSeparatorParserRuleCall_13_1()); 
    }
ruleSeparator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGameDescriptionAccess().getPublicBOOLParserRuleCall_13_2_0()); 
	    }
		lv_public_28_0=ruleBOOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGameDescriptionRule());
	        }
       		set(
       			$current, 
       			"public",
        		lv_public_28_0, 
        		"BOOL");
	        afterParserOrEnumRuleCall();
	    }

)
))?
    { 
        newCompositeNode(grammarAccess.getGameDescriptionAccess().getEndParserRuleCall_14()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAge
entryRuleAge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAgeRule()); }
	 iv_ruleAge=ruleAge 
	 { $current=$iv_ruleAge.current; } 
	 EOF 
;

// Rule Age
ruleAge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_ageMin_0_0=RULE_INT
		{
			newLeafNode(lv_ageMin_0_0, grammarAccess.getAgeAccess().getAgeMinINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAgeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ageMin",
        		lv_ageMin_0_0, 
        		"INT");
	    }

)
)	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAgeAccess().getHyphenMinusKeyword_1());
    }
(
(
		lv_ageMax_2_0=RULE_INT
		{
			newLeafNode(lv_ageMax_2_0, grammarAccess.getAgeAccess().getAgeMaxINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAgeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ageMax",
        		lv_ageMax_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRulePlayerDescription
entryRulePlayerDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlayerDescriptionRule()); }
	 iv_rulePlayerDescription=rulePlayerDescription 
	 { $current=$iv_rulePlayerDescription.current; } 
	 EOF 
;

// Rule PlayerDescription
rulePlayerDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Player' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPlayerDescriptionAccess().getPlayerKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlayerDescriptionAccess().getCharacteristicsCharacteristicParserRuleCall_1_0()); 
	    }
		lv_characteristics_1_0=ruleCharacteristic		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlayerDescriptionRule());
	        }
       		add(
       			$current, 
       			"characteristics",
        		lv_characteristics_1_0, 
        		"Characteristic");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getPlayerDescriptionAccess().getEndParserRuleCall_2()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCharacteristic
entryRuleCharacteristic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharacteristicRule()); }
	 iv_ruleCharacteristic=ruleCharacteristic 
	 { $current=$iv_ruleCharacteristic.current; } 
	 EOF 
;

// Rule Characteristic
ruleCharacteristic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getCharacteristicAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharacteristicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getCharacteristicAccess().getSeparatorParserRuleCall_1()); 
    }
ruleSeparator
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCharacteristicAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCharacteristicRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_question_3_0=RULE_STRING
		{
			newLeafNode(lv_question_3_0, grammarAccess.getCharacteristicAccess().getQuestionSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharacteristicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"question",
        		lv_question_3_0, 
        		"STRING");
	    }

)
)?)
;





// Entry rule entryRuleLearningOutcomes
entryRuleLearningOutcomes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLearningOutcomesRule()); }
	 iv_ruleLearningOutcomes=ruleLearningOutcomes 
	 { $current=$iv_ruleLearningOutcomes.current; } 
	 EOF 
;

// Rule LearningOutcomes
ruleLearningOutcomes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Learning-outcomes' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLearningOutcomesAccess().getLearningOutcomesKeyword_0_0());
    }

    |	otherlv_1='Scores' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLearningOutcomesAccess().getScoresKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLearningOutcomesAccess().getOutcomesOutcomeParserRuleCall_1_0()); 
	    }
		lv_outcomes_2_0=ruleOutcome		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLearningOutcomesRule());
	        }
       		add(
       			$current, 
       			"outcomes",
        		lv_outcomes_2_0, 
        		"Outcome");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getLearningOutcomesAccess().getEndParserRuleCall_2()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOutcome
entryRuleOutcome returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutcomeRule()); }
	 iv_ruleOutcome=ruleOutcome 
	 { $current=$iv_ruleOutcome.current; } 
	 EOF 
;

// Rule Outcome
ruleOutcome returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getOutcomeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutcomeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		lv_desc_1_0=RULE_STRING
		{
			newLeafNode(lv_desc_1_0, grammarAccess.getOutcomeAccess().getDescSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutcomeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"desc",
        		lv_desc_1_0, 
        		"STRING");
	    }

)
)?(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getOutcomeAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutcomeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getOutcomeAccess().getTypeTypeOutcomeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleTypeOutcome		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutcomeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeOutcome");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleTypeOutcome
entryRuleTypeOutcome returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeOutcomeRule()); }
	 iv_ruleTypeOutcome=ruleTypeOutcome 
	 { $current=$iv_ruleTypeOutcome.current; } 
	 EOF 
;

// Rule TypeOutcome
ruleTypeOutcome returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_knowledge_0_0=	'knowledge' 
    {
        newLeafNode(lv_knowledge_0_0, grammarAccess.getTypeOutcomeAccess().getKnowledgeKnowledgeKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeOutcomeRule());
	        }
       		setWithLastConsumed($current, "knowledge", true, "knowledge");
	    }

)
)
    |(
(
		lv_skill_1_0=	'skill' 
    {
        newLeafNode(lv_skill_1_0, grammarAccess.getTypeOutcomeAccess().getSkillSkillKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeOutcomeRule());
	        }
       		setWithLastConsumed($current, "skill", true, "skill");
	    }

)
)
    |(
(
		lv_competence_2_0=	'competence' 
    {
        newLeafNode(lv_competence_2_0, grammarAccess.getTypeOutcomeAccess().getCompetenceCompetenceKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeOutcomeRule());
	        }
       		setWithLastConsumed($current, "competence", true, "competence");
	    }

)
))
;





// Entry rule entryRuleFeedbackMessages
entryRuleFeedbackMessages returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeedbackMessagesRule()); }
	 iv_ruleFeedbackMessages=ruleFeedbackMessages 
	 { $current=$iv_ruleFeedbackMessages.current; } 
	 EOF 
;

// Rule FeedbackMessages
ruleFeedbackMessages returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Feedback-messages' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFeedbackMessagesAccess().getFeedbackMessagesKeyword_0_0());
    }

    |	otherlv_1='Feedback' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFeedbackMessagesAccess().getFeedbackKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFeedbackMessagesAccess().getFeedbackMsgsFeedbackParserRuleCall_1_0()); 
	    }
		lv_feedbackMsgs_2_0=ruleFeedback		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeedbackMessagesRule());
	        }
       		add(
       			$current, 
       			"feedbackMsgs",
        		lv_feedbackMsgs_2_0, 
        		"Feedback");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getFeedbackMessagesAccess().getEndParserRuleCall_2()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFeedback
entryRuleFeedback returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeedbackRule()); }
	 iv_ruleFeedback=ruleFeedback 
	 { $current=$iv_ruleFeedback.current; } 
	 EOF 
;

// Rule Feedback
ruleFeedback returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFeedbackAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeedbackRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		lv_message_1_0=RULE_STRING
		{
			newLeafNode(lv_message_1_0, grammarAccess.getFeedbackAccess().getMessageSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeedbackRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"message",
        		lv_message_1_0, 
        		"STRING");
	    }

)
)(
(
		lv_image_2_0=RULE_STRING
		{
			newLeafNode(lv_image_2_0, grammarAccess.getFeedbackAccess().getImageSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeedbackRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"image",
        		lv_image_2_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFeedbackAccess().getTypeTypeFeedbackParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleTypeFeedback		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeedbackRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeFeedback");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		lv_win_4_0=	'win' 
    {
        newLeafNode(lv_win_4_0, grammarAccess.getFeedbackAccess().getWinWinKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeedbackRule());
	        }
       		setWithLastConsumed($current, "win", true, "win");
	    }

)
)
    |(
(
		lv_lose_5_0=	'lose' 
    {
        newLeafNode(lv_lose_5_0, grammarAccess.getFeedbackAccess().getLoseLoseKeyword_4_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeedbackRule());
	        }
       		setWithLastConsumed($current, "lose", true, "lose");
	    }

)
)
    |(
(
		lv_end_6_0=	'end' 
    {
        newLeafNode(lv_end_6_0, grammarAccess.getFeedbackAccess().getEndEndKeyword_4_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeedbackRule());
	        }
       		setWithLastConsumed($current, "end", true, "end");
	    }

)
))?)
;





// Entry rule entryRuleTypeFeedback
entryRuleTypeFeedback returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeFeedbackRule()); } 
	 iv_ruleTypeFeedback=ruleTypeFeedback 
	 { $current=$iv_ruleTypeFeedback.current.getText(); }  
	 EOF 
;

// Rule TypeFeedback
ruleTypeFeedback returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='positive' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeFeedbackAccess().getPositiveKeyword_0()); 
    }

    |
	kw='negative' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeFeedbackAccess().getNegativeKeyword_1()); 
    }

    |
	kw='neutral' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeFeedbackAccess().getNeutralKeyword_2()); 
    }

    |
	kw='badge' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeFeedbackAccess().getBadgeKeyword_3()); 
    }

    |
	kw='hint' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeFeedbackAccess().getHintKeyword_4()); 
    }

    |
	kw='adaptation' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeFeedbackAccess().getAdaptationKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleEvidenceModel
entryRuleEvidenceModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEvidenceModelRule()); }
	 iv_ruleEvidenceModel=ruleEvidenceModel 
	 { $current=$iv_ruleEvidenceModel.current; } 
	 EOF 
;

// Rule EvidenceModel
ruleEvidenceModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Evidence-model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEvidenceModelAccess().getEvidenceModelKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEvidenceModelAccess().getActionsActionParserRuleCall_1_0()); 
	    }
		lv_actions_1_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvidenceModelRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_1_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getEvidenceModelAccess().getTimerActionsTimerActionsParserRuleCall_2_0()); 
	    }
		lv_timerActions_2_0=ruleTimerActions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvidenceModelRule());
	        }
       		set(
       			$current, 
       			"timerActions",
        		lv_timerActions_2_0, 
        		"TimerActions");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getEvidenceModelAccess().getActionSequenceActionSequencesParserRuleCall_3_0()); 
	    }
		lv_actionSequence_3_0=ruleActionSequences		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvidenceModelRule());
	        }
       		set(
       			$current, 
       			"actionSequence",
        		lv_actionSequence_3_0, 
        		"ActionSequences");
	        afterParserOrEnumRuleCall();
	    }

)
)?
    { 
        newCompositeNode(grammarAccess.getEvidenceModelAccess().getEndParserRuleCall_4()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleActionSequences
entryRuleActionSequences returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionSequencesRule()); }
	 iv_ruleActionSequences=ruleActionSequences 
	 { $current=$iv_ruleActionSequences.current; } 
	 EOF 
;

// Rule ActionSequences
ruleActionSequences returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Action-sequence' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActionSequencesAccess().getActionSequenceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionSequencesAccess().getActionSequencesActionSequenceParserRuleCall_1_0()); 
	    }
		lv_actionSequences_1_0=ruleActionSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionSequencesRule());
	        }
       		add(
       			$current, 
       			"actionSequences",
        		lv_actionSequences_1_0, 
        		"ActionSequence");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getActionSequencesAccess().getEndParserRuleCall_2()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleActionSequence
entryRuleActionSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionSequenceRule()); }
	 iv_ruleActionSequence=ruleActionSequence 
	 { $current=$iv_ruleActionSequence.current; } 
	 EOF 
;

// Rule ActionSequence
ruleActionSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_action1_0_0=RULE_ID
		{
			newLeafNode(lv_action1_0_0, grammarAccess.getActionSequenceAccess().getAction1IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionSequenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"action1",
        		lv_action1_0_0, 
        		"ID");
	    }

)
)((
(
		lv_before_1_0=	'before' 
    {
        newLeafNode(lv_before_1_0, grammarAccess.getActionSequenceAccess().getBeforeBeforeKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionSequenceRule());
	        }
       		setWithLastConsumed($current, "before", true, "before");
	    }

)
)
    |(
(
		lv_after_2_0=	'after' 
    {
        newLeafNode(lv_after_2_0, grammarAccess.getActionSequenceAccess().getAfterAfterKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionSequenceRule());
	        }
       		setWithLastConsumed($current, "after", true, "after");
	    }

)
))(
(
		lv_action2_3_0=RULE_ID
		{
			newLeafNode(lv_action2_3_0, grammarAccess.getActionSequenceAccess().getAction2IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionSequenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"action2",
        		lv_action2_3_0, 
        		"ID");
	    }

)
)	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getActionSequenceAccess().getElseKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionSequenceAccess().getSequenceReactionsActionReactionParserRuleCall_4_0()); 
	    }
		lv_sequenceReactions_5_0=ruleActionReaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionSequenceRule());
	        }
       		add(
       			$current, 
       			"sequenceReactions",
        		lv_sequenceReactions_5_0, 
        		"ActionReaction");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getActionSequenceAccess().getEndParserRuleCall_5()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTimerActions
entryRuleTimerActions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimerActionsRule()); }
	 iv_ruleTimerActions=ruleTimerActions 
	 { $current=$iv_ruleTimerActions.current; } 
	 EOF 
;

// Rule TimerActions
ruleTimerActions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Timer-actions' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTimerActionsAccess().getTimerActionsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTimerActionsAccess().getTimerActionsTimerActionParserRuleCall_1_0()); 
	    }
		lv_timerActions_1_0=ruleTimerAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimerActionsRule());
	        }
       		add(
       			$current, 
       			"timerActions",
        		lv_timerActions_1_0, 
        		"TimerAction");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getTimerActionsAccess().getEndParserRuleCall_2()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTimerAction
entryRuleTimerAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimerActionRule()); }
	 iv_ruleTimerAction=ruleTimerAction 
	 { $current=$iv_ruleTimerAction.current; } 
	 EOF 
;

// Rule TimerAction
ruleTimerAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTimerActionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimerActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTimerActionAccess().getTimingsTimingParserRuleCall_1_0()); 
	    }
		lv_timings_1_0=ruleTiming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimerActionRule());
	        }
       		add(
       			$current, 
       			"timings",
        		lv_timings_1_0, 
        		"Timing");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getTimerActionAccess().getEndParserRuleCall_2()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTiming
entryRuleTiming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimingRule()); }
	 iv_ruleTiming=ruleTiming 
	 { $current=$iv_ruleTiming.current; } 
	 EOF 
;

// Rule Timing
ruleTiming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_before_0_0=	'within' 
    {
        newLeafNode(lv_before_0_0, grammarAccess.getTimingAccess().getBeforeWithinKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimingRule());
	        }
       		setWithLastConsumed($current, "before", true, "within");
	    }

)
)
    |(
(
		lv_after_1_0=	'after' 
    {
        newLeafNode(lv_after_1_0, grammarAccess.getTimingAccess().getAfterAfterKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimingRule());
	        }
       		setWithLastConsumed($current, "after", true, "after");
	    }

)
))(
(
		lv_limit_2_0=RULE_INT
		{
			newLeafNode(lv_limit_2_0, grammarAccess.getTimingAccess().getLimitINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"limit",
        		lv_limit_2_0, 
        		"INT");
	    }

)
)	otherlv_3='sec' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTimingAccess().getSecKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTimingAccess().getTimingReactionsActionReactionParserRuleCall_3_0()); 
	    }
		lv_timingReactions_4_0=ruleActionReaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimingRule());
	        }
       		add(
       			$current, 
       			"timingReactions",
        		lv_timingReactions_4_0, 
        		"ActionReaction");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getTimingAccess().getEndParserRuleCall_4()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleActionReaction
entryRuleActionReaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionReactionRule()); }
	 iv_ruleActionReaction=ruleActionReaction 
	 { $current=$iv_ruleActionReaction.current; } 
	 EOF 
;

// Rule ActionReaction
ruleActionReaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionReactionAccess().getUpdateScoreUpdateScoreParserRuleCall_0_0()); 
	    }
		lv_updateScore_0_0=ruleUpdateScore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionReactionRule());
	        }
       		set(
       			$current, 
       			"updateScore",
        		lv_updateScore_0_0, 
        		"UpdateScore");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getActionReactionAccess().getTriggerFeedbackTriggerFeedbackParserRuleCall_1_0()); 
	    }
		lv_triggerFeedback_1_0=ruleTriggerFeedback		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionReactionRule());
	        }
       		set(
       			$current, 
       			"triggerFeedback",
        		lv_triggerFeedback_1_0, 
        		"TriggerFeedback");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUpdateScore
entryRuleUpdateScore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdateScoreRule()); }
	 iv_ruleUpdateScore=ruleUpdateScore 
	 { $current=$iv_ruleUpdateScore.current; } 
	 EOF 
;

// Rule UpdateScore
ruleUpdateScore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateScoreRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getUpdateScoreAccess().getOutcomeOutcomeCrossReference_0_0()); 
	}

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdateScoreAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateScoreAccess().getPtsPointParserRuleCall_2_0()); 
	    }
		lv_pts_2_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateScoreRule());
	        }
       		set(
       			$current, 
       			"pts",
        		lv_pts_2_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTriggerFeedback
entryRuleTriggerFeedback returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerFeedbackRule()); }
	 iv_ruleTriggerFeedback=ruleTriggerFeedback 
	 { $current=$iv_ruleTriggerFeedback.current; } 
	 EOF 
;

// Rule TriggerFeedback
ruleTriggerFeedback returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTriggerFeedbackAccess().getColonKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggerFeedbackRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTriggerFeedbackAccess().getFeedbackFeedbackCrossReference_1_0()); 
	}

)
)(
(
		lv_immediate_2_0=	'immediate' 
    {
        newLeafNode(lv_immediate_2_0, grammarAccess.getTriggerFeedbackAccess().getImmediateImmediateKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggerFeedbackRule());
	        }
       		setWithLastConsumed($current, "immediate", true, "immediate");
	    }

)
)?(
(
		lv_delayed_3_0=	'delayed' 
    {
        newLeafNode(lv_delayed_3_0, grammarAccess.getTriggerFeedbackAccess().getDelayedDelayedKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggerFeedbackRule());
	        }
       		setWithLastConsumed($current, "delayed", true, "delayed");
	    }

)
)?)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getActionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getParamsParameterParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getActionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getParamsParameterParserRuleCall_3_1_0()); 
	    }
		lv_params_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getActionAccess().getRightParenthesisKeyword_4());
    }
(
(
		lv_desc_6_0=RULE_STRING
		{
			newLeafNode(lv_desc_6_0, grammarAccess.getActionAccess().getDescSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"desc",
        		lv_desc_6_0, 
        		"STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getParamsInParamsInParserRuleCall_6_0()); 
	    }
		lv_paramsIn_7_0=ruleParamsIn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"paramsIn",
        		lv_paramsIn_7_0, 
        		"ParamsIn");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getPointsPointsParserRuleCall_7_0()); 
	    }
		lv_points_8_0=rulePoints		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		add(
       			$current, 
       			"points",
        		lv_points_8_0, 
        		"Points");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getReactionsReactionsParserRuleCall_8_0()); 
	    }
		lv_reactions_9_0=ruleReactions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"reactions",
        		lv_reactions_9_0, 
        		"Reactions");
	        afterParserOrEnumRuleCall();
	    }

)
)?
    { 
        newCompositeNode(grammarAccess.getActionAccess().getEndParserRuleCall_9()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParamsIn
entryRuleParamsIn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamsInRule()); }
	 iv_ruleParamsIn=ruleParamsIn 
	 { $current=$iv_ruleParamsIn.current; } 
	 EOF 
;

// Rule ParamsIn
ruleParamsIn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamsInAccess().getParamInParamInParserRuleCall_0()); 
	    }
		lv_paramIn_0_0=ruleParamIn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamsInRule());
	        }
       		add(
       			$current, 
       			"paramIn",
        		lv_paramIn_0_0, 
        		"ParamIn");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleParamIn
entryRuleParamIn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamInRule()); }
	 iv_ruleParamIn=ruleParamIn 
	 { $current=$iv_ruleParamIn.current; } 
	 EOF 
;

// Rule ParamIn
ruleParamIn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamInRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getParamInAccess().getParamParameterCrossReference_0_0()); 
	}

)
)	otherlv_1='in {' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamInAccess().getInKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamInAccess().getValuesPossParamParserRuleCall_2_0()); 
	    }
		lv_valuesPoss_2_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamInRule());
	        }
       		add(
       			$current, 
       			"valuesPoss",
        		lv_valuesPoss_2_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParamInAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamInAccess().getValuesPossParamParserRuleCall_3_1_0()); 
	    }
		lv_valuesPoss_4_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamInRule());
	        }
       		add(
       			$current, 
       			"valuesPoss",
        		lv_valuesPoss_4_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getParamInAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_logOnly_0_0=	'LogOnly' 
    {
        newLeafNode(lv_logOnly_0_0, grammarAccess.getParameterAccess().getLogOnlyLogOnlyKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed($current, "logOnly", true, "LogOnly");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRulePoints
entryRulePoints returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointsRule()); }
	 iv_rulePoints=rulePoints 
	 { $current=$iv_rulePoints.current; } 
	 EOF 
;

// Rule Points
rulePoints returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPointsAccess().getOutcomesPointsOutcomesPointsParserRuleCall_0_0()); 
	    }
		lv_outcomesPoints_0_0=ruleOutcomesPoints		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointsRule());
	        }
       		add(
       			$current, 
       			"outcomesPoints",
        		lv_outcomesPoints_0_0, 
        		"OutcomesPoints");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPointsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPointsAccess().getOutcomesPointsOutcomesPointsParserRuleCall_1_1_0()); 
	    }
		lv_outcomesPoints_2_0=ruleOutcomesPoints		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointsRule());
	        }
       		add(
       			$current, 
       			"outcomesPoints",
        		lv_outcomesPoints_2_0, 
        		"OutcomesPoints");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
(
		lv_others_3_1=	'others' 
    {
        newLeafNode(lv_others_3_1, grammarAccess.getPointsAccess().getOthersOthersKeyword_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointsRule());
	        }
       		setWithLastConsumed($current, "others", true, null);
	    }

    |		lv_others_3_2=	'else' 
    {
        newLeafNode(lv_others_3_2, grammarAccess.getPointsAccess().getOthersElseKeyword_2_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointsRule());
	        }
       		setWithLastConsumed($current, "others", true, null);
	    }

)

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPointsAccess().getParamsParamsParserRuleCall_2_1_0()); 
	    }
		lv_params_4_0=ruleParams		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointsRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"Params");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    { 
        newCompositeNode(grammarAccess.getPointsAccess().getEndParserRuleCall_3()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOutcomesPoints
entryRuleOutcomesPoints returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutcomesPointsRule()); }
	 iv_ruleOutcomesPoints=ruleOutcomesPoints 
	 { $current=$iv_ruleOutcomesPoints.current; } 
	 EOF 
;

// Rule OutcomesPoints
ruleOutcomesPoints returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutcomesPointsRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getOutcomesPointsAccess().getOutcomeOutcomeCrossReference_0_0_0()); 
	}

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutcomesPointsAccess().getHyphenMinusGreaterThanSignKeyword_0_1());
    }
)?(
(
		lv_resetValue_2_0=	'=' 
    {
        newLeafNode(lv_resetValue_2_0, grammarAccess.getOutcomesPointsAccess().getResetValueEqualsSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutcomesPointsRule());
	        }
       		setWithLastConsumed($current, "resetValue", true, "=");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getOutcomesPointsAccess().getPtsPointParserRuleCall_2_0_0()); 
	    }
		lv_pts_3_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutcomesPointsRule());
	        }
       		set(
       			$current, 
       			"pts",
        		lv_pts_3_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutcomesPointsRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getOutcomesPointsAccess().getVarParameterCrossReference_2_1_0()); 
	}

)
)))
;





// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	 iv_rulePoint=rulePoint 
	 { $current=$iv_rulePoint.current; } 
	 EOF 
;

// Rule Point
rulePoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_negative_0_0=	'-' 
    {
        newLeafNode(lv_negative_0_0, grammarAccess.getPointAccess().getNegativeHyphenMinusKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointRule());
	        }
       		setWithLastConsumed($current, "negative", true, "-");
	    }

)
)?(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getPointAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleSign
entryRuleSign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignRule()); } 
	 iv_ruleSign=ruleSign 
	 { $current=$iv_ruleSign.current.getText(); }  
	 EOF 
;

// Rule Sign
ruleSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleParams
entryRuleParams returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamsRule()); }
	 iv_ruleParams=ruleParams 
	 { $current=$iv_ruleParams.current; } 
	 EOF 
;

// Rule Params
ruleParams returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParamsAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamsAccess().getColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParamsAccess().getValuesParamParserRuleCall_1_0()); 
	    }
		lv_values_2_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamsRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParamsAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamsAccess().getValuesParamParserRuleCall_2_1_0()); 
	    }
		lv_values_4_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamsRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParam
entryRuleParam returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); } 
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current.getText(); }  
	 EOF 
;

// Rule Param
ruleParam returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getParamAccess().getINTTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getParamAccess().getFLOATParserRuleCall_1()); 
    }
    this_FLOAT_1=ruleFLOAT    {
		$current.merge(this_FLOAT_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getParamAccess().getSTRINGTerminalRuleCall_2()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getParamAccess().getBOOLParserRuleCall_3()); 
    }
    this_BOOL_3=ruleBOOL    {
		$current.merge(this_BOOL_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getParamAccess().getIDTerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFLOATRule()); } 
	 iv_ruleFLOAT=ruleFLOAT 
	 { $current=$iv_ruleFLOAT.current.getText(); }  
	 EOF 
;

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFLOATAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_1_1()); 
    }
))
    ;





// Entry rule entryRuleBOOL
entryRuleBOOL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLRule()); } 
	 iv_ruleBOOL=ruleBOOL 
	 { $current=$iv_ruleBOOL.current.getText(); }  
	 EOF 
;

// Rule BOOL
ruleBOOL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleReactions
entryRuleReactions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionsRule()); }
	 iv_ruleReactions=ruleReactions 
	 { $current=$iv_ruleReactions.current; } 
	 EOF 
;

// Rule Reactions
ruleReactions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='When' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReactionsAccess().getWhenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReactionsAccess().getReactionReactionParserRuleCall_1_0()); 
	    }
		lv_reaction_1_0=ruleReaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionsRule());
	        }
       		add(
       			$current, 
       			"reaction",
        		lv_reaction_1_0, 
        		"Reaction");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getReactionsAccess().getEndParserRuleCall_2()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReaction
entryRuleReaction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReactionRule()); }
	 iv_ruleReaction=ruleReaction 
	 { $current=$iv_ruleReaction.current; } 
	 EOF 
;

// Rule Reaction
ruleReaction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getReactionAccess().getParamsCParamConditionParserRuleCall_0_0()); 
	    }
		lv_paramsC_0_0=ruleParamCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionRule());
	        }
       		set(
       			$current, 
       			"paramsC",
        		lv_paramsC_0_0, 
        		"ParamCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getReactionAccess().getPointsCPointsConditionParserRuleCall_1_0_0()); 
	    }
		lv_pointsC_1_0=rulePointsCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReactionRule());
	        }
       		set(
       			$current, 
       			"pointsC",
        		lv_pointsC_1_0, 
        		"PointsCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReactionAccess().getColonKeyword_1_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReactionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getReactionAccess().getFeedbackFeedbackCrossReference_1_2_0()); 
	}

)
)(
(
		lv_immediate_4_0=	'immediate' 
    {
        newLeafNode(lv_immediate_4_0, grammarAccess.getReactionAccess().getImmediateImmediateKeyword_1_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReactionRule());
	        }
       		setWithLastConsumed($current, "immediate", true, "immediate");
	    }

)
)?(
(
		lv_delayed_5_0=	'delayed' 
    {
        newLeafNode(lv_delayed_5_0, grammarAccess.getReactionAccess().getDelayedDelayedKeyword_1_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReactionRule());
	        }
       		setWithLastConsumed($current, "delayed", true, "delayed");
	    }

)
)?))
;





// Entry rule entryRuleParamCondition
entryRuleParamCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamConditionRule()); }
	 iv_ruleParamCondition=ruleParamCondition 
	 { $current=$iv_ruleParamCondition.current; } 
	 EOF 
;

// Rule ParamCondition
ruleParamCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamConditionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getParamConditionAccess().getParamsParamsCrossReference_0()); 
	}

)
)
;





// Entry rule entryRulePointsCondition
entryRulePointsCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointsConditionRule()); }
	 iv_rulePointsCondition=rulePointsCondition 
	 { $current=$iv_rulePointsCondition.current; } 
	 EOF 
;

// Rule PointsCondition
rulePointsCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPointsConditionAccess().getKeyWdPointsKeyWdParserRuleCall_0_0()); 
	    }
		lv_keyWd_0_0=rulePointsKeyWd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointsConditionRule());
	        }
       		set(
       			$current, 
       			"keyWd",
        		lv_keyWd_0_0, 
        		"PointsKeyWd");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPointsConditionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getPointsConditionAccess().getSignSignParserRuleCall_2_0_0()); 
	    }
		lv_sign_2_0=ruleSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointsConditionRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_2_0, 
        		"Sign");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPointsConditionAccess().getValuePointParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointsConditionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPointsConditionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRulePointsKeyWd
entryRulePointsKeyWd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointsKeyWdRule()); } 
	 iv_rulePointsKeyWd=rulePointsKeyWd 
	 { $current=$iv_rulePointsKeyWd.current.getText(); }  
	 EOF 
;

// Rule PointsKeyWd
rulePointsKeyWd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='any' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPointsKeyWdAccess().getAnyKeyword_0()); 
    }

    |
	kw='all' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPointsKeyWdAccess().getAllKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleFeedbackModel
entryRuleFeedbackModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeedbackModelRule()); }
	 iv_ruleFeedbackModel=ruleFeedbackModel 
	 { $current=$iv_ruleFeedbackModel.current; } 
	 EOF 
;

// Rule FeedbackModel
ruleFeedbackModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Feedback-model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFeedbackModelAccess().getFeedbackModelKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFeedbackModelAccess().getTriggersTriggerParserRuleCall_1_0()); 
	    }
		lv_triggers_1_0=ruleTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeedbackModelRule());
	        }
       		add(
       			$current, 
       			"triggers",
        		lv_triggers_1_0, 
        		"Trigger");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getFeedbackModelAccess().getEndParserRuleCall_2()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTrigger
entryRuleTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerRule()); }
	 iv_ruleTrigger=ruleTrigger 
	 { $current=$iv_ruleTrigger.current; } 
	 EOF 
;

// Rule Trigger
ruleTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getPerfOutcomeValueLimitParserRuleCall_0_0()); 
	    }
		lv_perf_0_0=ruleOutcomeValueLimit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"perf",
        		lv_perf_0_0, 
        		"OutcomeValueLimit");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerAccess().getInactivityInactivityLimitParserRuleCall_1_0()); 
	    }
		lv_inactivity_1_0=ruleInactivityLimit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerRule());
	        }
       		set(
       			$current, 
       			"inactivity",
        		lv_inactivity_1_0, 
        		"InactivityLimit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOutcomeValueLimit
entryRuleOutcomeValueLimit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutcomeValueLimitRule()); }
	 iv_ruleOutcomeValueLimit=ruleOutcomeValueLimit 
	 { $current=$iv_ruleOutcomeValueLimit.current; } 
	 EOF 
;

// Rule OutcomeValueLimit
ruleOutcomeValueLimit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutcomeValueLimitRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getOutcomeValueLimitAccess().getOutcomeOutcomeCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOutcomeValueLimitAccess().getSignCompSignParserRuleCall_1_0()); 
	    }
		lv_sign_1_0=ruleCompSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutcomeValueLimitRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_1_0, 
        		"CompSign");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_negativeLimit_2_0=	'-' 
    {
        newLeafNode(lv_negativeLimit_2_0, grammarAccess.getOutcomeValueLimitAccess().getNegativeLimitHyphenMinusKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutcomeValueLimitRule());
	        }
       		setWithLastConsumed($current, "negativeLimit", true, "-");
	    }

)
)?(
(
		lv_limit_3_0=RULE_INT
		{
			newLeafNode(lv_limit_3_0, grammarAccess.getOutcomeValueLimitAccess().getLimitINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutcomeValueLimitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"limit",
        		lv_limit_3_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOutcomeValueLimitAccess().getTriggerReactionsTriggerFeedbackParserRuleCall_4_0()); 
	    }
		lv_triggerReactions_4_0=ruleTriggerFeedback		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutcomeValueLimitRule());
	        }
       		add(
       			$current, 
       			"triggerReactions",
        		lv_triggerReactions_4_0, 
        		"TriggerFeedback");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleCompSign
entryRuleCompSign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompSignRule()); } 
	 iv_ruleCompSign=ruleCompSign 
	 { $current=$iv_ruleCompSign.current.getText(); }  
	 EOF 
;

// Rule CompSign
ruleCompSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompSignAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompSignAccess().getGreaterThanSignKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleInactivityLimit
entryRuleInactivityLimit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInactivityLimitRule()); }
	 iv_ruleInactivityLimit=ruleInactivityLimit 
	 { $current=$iv_ruleInactivityLimit.current; } 
	 EOF 
;

// Rule InactivityLimit
ruleInactivityLimit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='inactivity' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInactivityLimitAccess().getInactivityKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInactivityLimitAccess().getSignCompSignParserRuleCall_1_0()); 
	    }
		lv_sign_1_0=ruleCompSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInactivityLimitRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_1_0, 
        		"CompSign");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_limit_2_0=RULE_INT
		{
			newLeafNode(lv_limit_2_0, grammarAccess.getInactivityLimitAccess().getLimitINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInactivityLimitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"limit",
        		lv_limit_2_0, 
        		"INT");
	    }

)
)	otherlv_3='sec' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInactivityLimitAccess().getSecKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInactivityLimitAccess().getTriggerReactionsActionReactionParserRuleCall_4_0()); 
	    }
		lv_triggerReactions_4_0=ruleActionReaction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInactivityLimitRule());
	        }
       		add(
       			$current, 
       			"triggerReactions",
        		lv_triggerReactions_4_0, 
        		"ActionReaction");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleBadgeModel
entryRuleBadgeModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBadgeModelRule()); }
	 iv_ruleBadgeModel=ruleBadgeModel 
	 { $current=$iv_ruleBadgeModel.current; } 
	 EOF 
;

// Rule BadgeModel
ruleBadgeModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Badge-model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBadgeModelAccess().getBadgeModelKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBadgeModelAccess().getGenericTriggersGenericTriggerParserRuleCall_1_0()); 
	    }
		lv_genericTriggers_1_0=ruleGenericTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBadgeModelRule());
	        }
       		add(
       			$current, 
       			"genericTriggers",
        		lv_genericTriggers_1_0, 
        		"GenericTrigger");
	        afterParserOrEnumRuleCall();
	    }

)
)+
    { 
        newCompositeNode(grammarAccess.getBadgeModelAccess().getEndParserRuleCall_2()); 
    }
ruleEnd
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGenericTrigger
entryRuleGenericTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericTriggerRule()); }
	 iv_ruleGenericTrigger=ruleGenericTrigger 
	 { $current=$iv_ruleGenericTrigger.current; } 
	 EOF 
;

// Rule GenericTrigger
ruleGenericTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGenericTriggerAccess().getSimpleSimpleTriggerParserRuleCall_0_0()); 
	    }
		lv_simple_0_0=ruleSimpleTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericTriggerRule());
	        }
       		set(
       			$current, 
       			"simple",
        		lv_simple_0_0, 
        		"SimpleTrigger");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericTriggerAccess().getLoLOTriggerParserRuleCall_1_0()); 
	    }
		lv_lo_1_0=ruleLOTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericTriggerRule());
	        }
       		set(
       			$current, 
       			"lo",
        		lv_lo_1_0, 
        		"LOTrigger");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSimpleTrigger
entryRuleSimpleTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleTriggerRule()); }
	 iv_ruleSimpleTrigger=ruleSimpleTrigger 
	 { $current=$iv_ruleSimpleTrigger.current; } 
	 EOF 
;

// Rule SimpleTrigger
ruleSimpleTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTriggerAccess().getFunctionFeedbackKeywordsSimpleParserRuleCall_0_0()); 
	    }
		lv_function_0_0=ruleFeedbackKeywordsSimple		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTriggerRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_0_0, 
        		"FeedbackKeywordsSimple");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSignCompSignParserRuleCall_1_0()); 
	    }
		lv_sign_1_0=ruleCompSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTriggerRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_1_0, 
        		"CompSign");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_negativeLimit_2_0=	'-' 
    {
        newLeafNode(lv_negativeLimit_2_0, grammarAccess.getSimpleTriggerAccess().getNegativeLimitHyphenMinusKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleTriggerRule());
	        }
       		setWithLastConsumed($current, "negativeLimit", true, "-");
	    }

)
)?(
(
		lv_limit_3_0=RULE_INT
		{
			newLeafNode(lv_limit_3_0, grammarAccess.getSimpleTriggerAccess().getLimitINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleTriggerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"limit",
        		lv_limit_3_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTriggerAccess().getTriggerReactionsTriggerFeedbackParserRuleCall_4_0()); 
	    }
		lv_triggerReactions_4_0=ruleTriggerFeedback		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTriggerRule());
	        }
       		add(
       			$current, 
       			"triggerReactions",
        		lv_triggerReactions_4_0, 
        		"TriggerFeedback");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleLOTrigger
entryRuleLOTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLOTriggerRule()); }
	 iv_ruleLOTrigger=ruleLOTrigger 
	 { $current=$iv_ruleLOTrigger.current; } 
	 EOF 
;

// Rule LOTrigger
ruleLOTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLOTriggerAccess().getFunctionFeedbackKeywordsComplexParserRuleCall_0_0()); 
	    }
		lv_function_0_0=ruleFeedbackKeywordsComplex		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLOTriggerRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_0_0, 
        		"FeedbackKeywordsComplex");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLOTriggerRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getLOTriggerAccess().getOutcomeOutcomeCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLOTriggerAccess().getSignCompSignParserRuleCall_2_0()); 
	    }
		lv_sign_2_0=ruleCompSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLOTriggerRule());
	        }
       		set(
       			$current, 
       			"sign",
        		lv_sign_2_0, 
        		"CompSign");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_negativeLimit_3_0=	'-' 
    {
        newLeafNode(lv_negativeLimit_3_0, grammarAccess.getLOTriggerAccess().getNegativeLimitHyphenMinusKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLOTriggerRule());
	        }
       		setWithLastConsumed($current, "negativeLimit", true, "-");
	    }

)
)?(
(
		lv_limit_4_0=RULE_INT
		{
			newLeafNode(lv_limit_4_0, grammarAccess.getLOTriggerAccess().getLimitINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLOTriggerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"limit",
        		lv_limit_4_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLOTriggerAccess().getTriggerReactionsTriggerFeedbackParserRuleCall_5_0()); 
	    }
		lv_triggerReactions_5_0=ruleTriggerFeedback		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLOTriggerRule());
	        }
       		add(
       			$current, 
       			"triggerReactions",
        		lv_triggerReactions_5_0, 
        		"TriggerFeedback");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleFeedbackKeywordsSimple
entryRuleFeedbackKeywordsSimple returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeedbackKeywordsSimpleRule()); } 
	 iv_ruleFeedbackKeywordsSimple=ruleFeedbackKeywordsSimple 
	 { $current=$iv_ruleFeedbackKeywordsSimple.current.getText(); }  
	 EOF 
;

// Rule FeedbackKeywordsSimple
ruleFeedbackKeywordsSimple returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='numberGameplays' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeedbackKeywordsSimpleAccess().getNumberGameplaysKeyword_0()); 
    }

    |
	kw='numberWin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeedbackKeywordsSimpleAccess().getNumberWinKeyword_1()); 
    }

    |
	kw='totalTime' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeedbackKeywordsSimpleAccess().getTotalTimeKeyword_2()); 
    }

    |
	kw='averageTime' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeedbackKeywordsSimpleAccess().getAverageTimeKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleFeedbackKeywordsComplex
entryRuleFeedbackKeywordsComplex returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeedbackKeywordsComplexRule()); } 
	 iv_ruleFeedbackKeywordsComplex=ruleFeedbackKeywordsComplex 
	 { $current=$iv_ruleFeedbackKeywordsComplex.current.getText(); }  
	 EOF 
;

// Rule FeedbackKeywordsComplex
ruleFeedbackKeywordsComplex returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='sumScore' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeedbackKeywordsComplexAccess().getSumScoreKeyword_0()); 
    }

    |
	kw='averageScore' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeedbackKeywordsComplexAccess().getAverageScoreKeyword_1()); 
    }

    |
	kw='maxScore' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeedbackKeywordsComplexAccess().getMaxScoreKeyword_2()); 
    }

    |
	kw='minScore' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeedbackKeywordsComplexAccess().getMinScoreKeyword_3()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


