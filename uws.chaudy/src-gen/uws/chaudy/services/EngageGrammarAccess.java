/*
* generated by Xtext
*/

package uws.chaudy.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EngageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGameGameDescriptionParserRuleCall_0_0 = (RuleCall)cGameAssignment_0.eContents().get(0);
		private final Assignment cPlayerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlayerPlayerDescriptionParserRuleCall_1_0 = (RuleCall)cPlayerAssignment_1.eContents().get(0);
		private final Assignment cLearningOutcomesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLearningOutcomesLearningOutcomesParserRuleCall_2_0 = (RuleCall)cLearningOutcomesAssignment_2.eContents().get(0);
		private final Assignment cFeedbackMessagesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeedbackMessagesFeedbackMessagesParserRuleCall_3_0 = (RuleCall)cFeedbackMessagesAssignment_3.eContents().get(0);
		private final Assignment cEvidenceModelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEvidenceModelEvidenceModelParserRuleCall_4_0 = (RuleCall)cEvidenceModelAssignment_4.eContents().get(0);
		private final Assignment cFeedbackModelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeedbackModelFeedbackModelParserRuleCall_5_0 = (RuleCall)cFeedbackModelAssignment_5.eContents().get(0);
		
		//Model:
		//
		//	game=GameDescription player=PlayerDescription? learningOutcomes=LearningOutcomes feedbackMessages=FeedbackMessages?
		//
		//	evidenceModel=EvidenceModel feedbackModel=FeedbackModel?;
		public ParserRule getRule() { return rule; }

		//game=GameDescription player=PlayerDescription? learningOutcomes=LearningOutcomes feedbackMessages=FeedbackMessages?
		//
		//evidenceModel=EvidenceModel feedbackModel=FeedbackModel?
		public Group getGroup() { return cGroup; }

		//game=GameDescription
		public Assignment getGameAssignment_0() { return cGameAssignment_0; }

		//GameDescription
		public RuleCall getGameGameDescriptionParserRuleCall_0_0() { return cGameGameDescriptionParserRuleCall_0_0; }

		//player=PlayerDescription?
		public Assignment getPlayerAssignment_1() { return cPlayerAssignment_1; }

		//PlayerDescription
		public RuleCall getPlayerPlayerDescriptionParserRuleCall_1_0() { return cPlayerPlayerDescriptionParserRuleCall_1_0; }

		//learningOutcomes=LearningOutcomes
		public Assignment getLearningOutcomesAssignment_2() { return cLearningOutcomesAssignment_2; }

		//LearningOutcomes
		public RuleCall getLearningOutcomesLearningOutcomesParserRuleCall_2_0() { return cLearningOutcomesLearningOutcomesParserRuleCall_2_0; }

		//feedbackMessages=FeedbackMessages?
		public Assignment getFeedbackMessagesAssignment_3() { return cFeedbackMessagesAssignment_3; }

		//FeedbackMessages
		public RuleCall getFeedbackMessagesFeedbackMessagesParserRuleCall_3_0() { return cFeedbackMessagesFeedbackMessagesParserRuleCall_3_0; }

		//evidenceModel=EvidenceModel
		public Assignment getEvidenceModelAssignment_4() { return cEvidenceModelAssignment_4; }

		//EvidenceModel
		public RuleCall getEvidenceModelEvidenceModelParserRuleCall_4_0() { return cEvidenceModelEvidenceModelParserRuleCall_4_0; }

		//feedbackModel=FeedbackModel?
		public Assignment getFeedbackModelAssignment_5() { return cFeedbackModelAssignment_5; }

		//FeedbackModel
		public RuleCall getFeedbackModelFeedbackModelParserRuleCall_5_0() { return cFeedbackModelFeedbackModelParserRuleCall_5_0; }
	}

	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "End");
		private final Keyword cEndKeyword = (Keyword)rule.eContents().get(1);
		
		//End:
		//
		//	"End";
		public ParserRule getRule() { return rule; }

		//"End"
		public Keyword getEndKeyword() { return cEndKeyword; }
	}

	public class SeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Separator");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		//Separator:
		//
		//	":";
		public ParserRule getRule() { return rule; }

		//":"
		public Keyword getColonKeyword() { return cColonKeyword; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimpleTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cSimpleTypeAlternatives_0_0 = (Alternatives)cSimpleTypeAssignment_0.eContents().get(0);
		private final Keyword cSimpleTypeIntKeyword_0_0_0 = (Keyword)cSimpleTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cSimpleTypeFloatKeyword_0_0_1 = (Keyword)cSimpleTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cSimpleTypeStringKeyword_0_0_2 = (Keyword)cSimpleTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cSimpleTypeBoolKeyword_0_0_3 = (Keyword)cSimpleTypeAlternatives_0_0.eContents().get(3);
		private final Keyword cSimpleTypeCharKeyword_0_0_4 = (Keyword)cSimpleTypeAlternatives_0_0.eContents().get(4);
		private final Keyword cSimpleTypeTextKeyword_0_0_5 = (Keyword)cSimpleTypeAlternatives_0_0.eContents().get(5);
		private final Assignment cEnumTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEnumTypeEnumParserRuleCall_1_0 = (RuleCall)cEnumTypeAssignment_1.eContents().get(0);
		
		//Type:
		//
		//	simpleType=("Int" | "Float" | "String" | "Bool" | "Char" | "Text") | enumType=Enum;
		public ParserRule getRule() { return rule; }

		//simpleType=("Int" | "Float" | "String" | "Bool" | "Char" | "Text") | enumType=Enum
		public Alternatives getAlternatives() { return cAlternatives; }

		//simpleType=("Int" | "Float" | "String" | "Bool" | "Char" | "Text")
		public Assignment getSimpleTypeAssignment_0() { return cSimpleTypeAssignment_0; }

		//"Int" | "Float" | "String" | "Bool" | "Char" | "Text"
		public Alternatives getSimpleTypeAlternatives_0_0() { return cSimpleTypeAlternatives_0_0; }

		//"Int"
		public Keyword getSimpleTypeIntKeyword_0_0_0() { return cSimpleTypeIntKeyword_0_0_0; }

		//"Float"
		public Keyword getSimpleTypeFloatKeyword_0_0_1() { return cSimpleTypeFloatKeyword_0_0_1; }

		//"String"
		public Keyword getSimpleTypeStringKeyword_0_0_2() { return cSimpleTypeStringKeyword_0_0_2; }

		//"Bool"
		public Keyword getSimpleTypeBoolKeyword_0_0_3() { return cSimpleTypeBoolKeyword_0_0_3; }

		//"Char"
		public Keyword getSimpleTypeCharKeyword_0_0_4() { return cSimpleTypeCharKeyword_0_0_4; }

		//"Text"
		public Keyword getSimpleTypeTextKeyword_0_0_5() { return cSimpleTypeTextKeyword_0_0_5; }

		//enumType=Enum
		public Assignment getEnumTypeAssignment_1() { return cEnumTypeAssignment_1; }

		//Enum
		public RuleCall getEnumTypeEnumParserRuleCall_1_0() { return cEnumTypeEnumParserRuleCall_1_0; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnumValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnumValuesSTRINGTerminalRuleCall_2_0 = (RuleCall)cEnumValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEnumValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEnumValuesSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cEnumValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enum:
		//
		//	"Enum" "(" enumValues+=STRING ("," enumValues+=STRING)* ")";
		public ParserRule getRule() { return rule; }

		//"Enum" "(" enumValues+=STRING ("," enumValues+=STRING)* ")"
		public Group getGroup() { return cGroup; }

		//"Enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//enumValues+=STRING
		public Assignment getEnumValuesAssignment_2() { return cEnumValuesAssignment_2; }

		//STRING
		public RuleCall getEnumValuesSTRINGTerminalRuleCall_2_0() { return cEnumValuesSTRINGTerminalRuleCall_2_0; }

		//("," enumValues+=STRING)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//enumValues+=STRING
		public Assignment getEnumValuesAssignment_3_1() { return cEnumValuesAssignment_3_1; }

		//STRING
		public RuleCall getEnumValuesSTRINGTerminalRuleCall_3_1_0() { return cEnumValuesSTRINGTerminalRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class GameDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GameDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeriousGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSGnameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSeparatorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSGdeveloperKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSeparatorParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cDevAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDevINTTerminalRuleCall_6_0 = (RuleCall)cDevAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSGdescKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cSeparatorParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cDescAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDescSTRINGTerminalRuleCall_7_2_0 = (RuleCall)cDescAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cSGageRangeKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cSeparatorParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cAgeRangeAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cAgeRangeAgeParserRuleCall_8_2_0 = (RuleCall)cAgeRangeAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cSGlanguageKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cSeparatorParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Assignment cLangAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cLangIDTerminalRuleCall_9_2_0 = (RuleCall)cLangAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cSGcountryKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cSeparatorParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Assignment cCountryAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cCountryIDTerminalRuleCall_10_2_0 = (RuleCall)cCountryAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cSGgenreKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final RuleCall cSeparatorParserRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final Assignment cGenreAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cGenreSTRINGTerminalRuleCall_11_2_0 = (RuleCall)cGenreAssignment_11_2.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cSGsubjectKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final RuleCall cSeparatorParserRuleCall_12_1 = (RuleCall)cGroup_12.eContents().get(1);
		private final Assignment cSubjectAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cSubjectSTRINGTerminalRuleCall_12_2_0 = (RuleCall)cSubjectAssignment_12_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cSGpublicKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final RuleCall cSeparatorParserRuleCall_13_1 = (RuleCall)cGroup_13.eContents().get(1);
		private final Assignment cPublicAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cPublicBOOLParserRuleCall_13_2_0 = (RuleCall)cPublicAssignment_13_2.eContents().get(0);
		private final RuleCall cEndParserRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		
		//// ******************************* Game Description ******************************* //
		//
		//GameDescription:
		//
		//	"Serious-game" "SGname" Separator name=STRING "SGdeveloper" Separator dev=INT ("SGdesc" Separator desc=STRING)?
		//
		//	("SGageRange" Separator ageRange=Age)? ("SGlanguage" Separator lang=ID)? ("SGcountry" Separator country=ID)?
		//
		//	("SGgenre" Separator genre=STRING)? ("SGsubject" Separator subject=STRING)? ("SGpublic" Separator public=BOOL)? End;
		public ParserRule getRule() { return rule; }

		//"Serious-game" "SGname" Separator name=STRING "SGdeveloper" Separator dev=INT ("SGdesc" Separator desc=STRING)?
		//
		//("SGageRange" Separator ageRange=Age)? ("SGlanguage" Separator lang=ID)? ("SGcountry" Separator country=ID)?
		//
		//("SGgenre" Separator genre=STRING)? ("SGsubject" Separator subject=STRING)? ("SGpublic" Separator public=BOOL)? End
		public Group getGroup() { return cGroup; }

		//"Serious-game"
		public Keyword getSeriousGameKeyword_0() { return cSeriousGameKeyword_0; }

		//"SGname"
		public Keyword getSGnameKeyword_1() { return cSGnameKeyword_1; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_2() { return cSeparatorParserRuleCall_2; }

		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }

		//"SGdeveloper"
		public Keyword getSGdeveloperKeyword_4() { return cSGdeveloperKeyword_4; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_5() { return cSeparatorParserRuleCall_5; }

		//dev=INT
		public Assignment getDevAssignment_6() { return cDevAssignment_6; }

		//INT
		public RuleCall getDevINTTerminalRuleCall_6_0() { return cDevINTTerminalRuleCall_6_0; }

		//("SGdesc" Separator desc=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"SGdesc"
		public Keyword getSGdescKeyword_7_0() { return cSGdescKeyword_7_0; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_7_1() { return cSeparatorParserRuleCall_7_1; }

		//desc=STRING
		public Assignment getDescAssignment_7_2() { return cDescAssignment_7_2; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_7_2_0() { return cDescSTRINGTerminalRuleCall_7_2_0; }

		//("SGageRange" Separator ageRange=Age)?
		public Group getGroup_8() { return cGroup_8; }

		//"SGageRange"
		public Keyword getSGageRangeKeyword_8_0() { return cSGageRangeKeyword_8_0; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_8_1() { return cSeparatorParserRuleCall_8_1; }

		//ageRange=Age
		public Assignment getAgeRangeAssignment_8_2() { return cAgeRangeAssignment_8_2; }

		//Age
		public RuleCall getAgeRangeAgeParserRuleCall_8_2_0() { return cAgeRangeAgeParserRuleCall_8_2_0; }

		//("SGlanguage" Separator lang=ID)?
		public Group getGroup_9() { return cGroup_9; }

		//"SGlanguage"
		public Keyword getSGlanguageKeyword_9_0() { return cSGlanguageKeyword_9_0; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_9_1() { return cSeparatorParserRuleCall_9_1; }

		//lang=ID
		public Assignment getLangAssignment_9_2() { return cLangAssignment_9_2; }

		//ID
		public RuleCall getLangIDTerminalRuleCall_9_2_0() { return cLangIDTerminalRuleCall_9_2_0; }

		//("SGcountry" Separator country=ID)?
		public Group getGroup_10() { return cGroup_10; }

		//"SGcountry"
		public Keyword getSGcountryKeyword_10_0() { return cSGcountryKeyword_10_0; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_10_1() { return cSeparatorParserRuleCall_10_1; }

		//country=ID
		public Assignment getCountryAssignment_10_2() { return cCountryAssignment_10_2; }

		//ID
		public RuleCall getCountryIDTerminalRuleCall_10_2_0() { return cCountryIDTerminalRuleCall_10_2_0; }

		//("SGgenre" Separator genre=STRING)?
		public Group getGroup_11() { return cGroup_11; }

		//"SGgenre"
		public Keyword getSGgenreKeyword_11_0() { return cSGgenreKeyword_11_0; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_11_1() { return cSeparatorParserRuleCall_11_1; }

		//genre=STRING
		public Assignment getGenreAssignment_11_2() { return cGenreAssignment_11_2; }

		//STRING
		public RuleCall getGenreSTRINGTerminalRuleCall_11_2_0() { return cGenreSTRINGTerminalRuleCall_11_2_0; }

		//("SGsubject" Separator subject=STRING)?
		public Group getGroup_12() { return cGroup_12; }

		//"SGsubject"
		public Keyword getSGsubjectKeyword_12_0() { return cSGsubjectKeyword_12_0; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_12_1() { return cSeparatorParserRuleCall_12_1; }

		//subject=STRING
		public Assignment getSubjectAssignment_12_2() { return cSubjectAssignment_12_2; }

		//STRING
		public RuleCall getSubjectSTRINGTerminalRuleCall_12_2_0() { return cSubjectSTRINGTerminalRuleCall_12_2_0; }

		//("SGpublic" Separator public=BOOL)?
		public Group getGroup_13() { return cGroup_13; }

		//"SGpublic"
		public Keyword getSGpublicKeyword_13_0() { return cSGpublicKeyword_13_0; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_13_1() { return cSeparatorParserRuleCall_13_1; }

		//public=BOOL
		public Assignment getPublicAssignment_13_2() { return cPublicAssignment_13_2; }

		//BOOL
		public RuleCall getPublicBOOLParserRuleCall_13_2_0() { return cPublicBOOLParserRuleCall_13_2_0; }

		//End
		public RuleCall getEndParserRuleCall_14() { return cEndParserRuleCall_14; }
	}

	public class AgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Age");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAgeMinAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAgeMinINTTerminalRuleCall_0_0 = (RuleCall)cAgeMinAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAgeMaxAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAgeMaxINTTerminalRuleCall_2_0 = (RuleCall)cAgeMaxAssignment_2.eContents().get(0);
		
		//Age:
		//
		//	ageMin=INT "-" ageMax=INT;
		public ParserRule getRule() { return rule; }

		//ageMin=INT "-" ageMax=INT
		public Group getGroup() { return cGroup; }

		//ageMin=INT
		public Assignment getAgeMinAssignment_0() { return cAgeMinAssignment_0; }

		//INT
		public RuleCall getAgeMinINTTerminalRuleCall_0_0() { return cAgeMinINTTerminalRuleCall_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//ageMax=INT
		public Assignment getAgeMaxAssignment_2() { return cAgeMaxAssignment_2; }

		//INT
		public RuleCall getAgeMaxINTTerminalRuleCall_2_0() { return cAgeMaxINTTerminalRuleCall_2_0; }
	}

	public class PlayerDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlayerDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlayerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCharacteristicsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharacteristicsCharacteristicParserRuleCall_1_0 = (RuleCall)cCharacteristicsAssignment_1.eContents().get(0);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// ******************************* Player Description ******************************* //
		//
		//PlayerDescription:
		//
		//	"Player" characteristics+=Characteristic+ End;
		public ParserRule getRule() { return rule; }

		//"Player" characteristics+=Characteristic+ End
		public Group getGroup() { return cGroup; }

		//"Player"
		public Keyword getPlayerKeyword_0() { return cPlayerKeyword_0; }

		//characteristics+=Characteristic+
		public Assignment getCharacteristicsAssignment_1() { return cCharacteristicsAssignment_1; }

		//Characteristic
		public RuleCall getCharacteristicsCharacteristicParserRuleCall_1_0() { return cCharacteristicsCharacteristicParserRuleCall_1_0; }

		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}

	public class CharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Characteristic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cSeparatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Characteristic:
		//
		//	name=ID Separator type=Type;
		public ParserRule getRule() { return rule; }

		//name=ID Separator type=Type
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//Separator
		public RuleCall getSeparatorParserRuleCall_1() { return cSeparatorParserRuleCall_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}

	public class LearningOutcomesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LearningOutcomes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLearningOutcomesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOutcomesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutcomesOutcomeParserRuleCall_1_0 = (RuleCall)cOutcomesAssignment_1.eContents().get(0);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// ******************************* Learning Outcomes ******************************* //
		//
		//LearningOutcomes:
		//
		//	"Learning-outcomes" outcomes+=Outcome+ End;
		public ParserRule getRule() { return rule; }

		//"Learning-outcomes" outcomes+=Outcome+ End
		public Group getGroup() { return cGroup; }

		//"Learning-outcomes"
		public Keyword getLearningOutcomesKeyword_0() { return cLearningOutcomesKeyword_0; }

		//outcomes+=Outcome+
		public Assignment getOutcomesAssignment_1() { return cOutcomesAssignment_1; }

		//Outcome
		public RuleCall getOutcomesOutcomeParserRuleCall_1_0() { return cOutcomesOutcomeParserRuleCall_1_0; }

		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}

	public class OutcomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Outcome");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDescAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeOutcomeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Outcome:
		//
		//	name=ID desc=STRING? value=INT? type=TypeOutcome?;
		public ParserRule getRule() { return rule; }

		//name=ID desc=STRING? value=INT? type=TypeOutcome?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//desc=STRING?
		public Assignment getDescAssignment_1() { return cDescAssignment_1; }

		//STRING
		public RuleCall getDescSTRINGTerminalRuleCall_1_0() { return cDescSTRINGTerminalRuleCall_1_0; }

		//value=INT?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }

		//type=TypeOutcome?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeOutcome
		public RuleCall getTypeTypeOutcomeParserRuleCall_3_0() { return cTypeTypeOutcomeParserRuleCall_3_0; }
	}

	public class TypeOutcomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeOutcome");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKnowledgeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cKnowledgeKnowledgeKeyword_0_0 = (Keyword)cKnowledgeAssignment_0.eContents().get(0);
		private final Assignment cSkillAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSkillSkillKeyword_1_0 = (Keyword)cSkillAssignment_1.eContents().get(0);
		private final Assignment cCompetenceAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cCompetenceCompetenceKeyword_2_0 = (Keyword)cCompetenceAssignment_2.eContents().get(0);
		
		//TypeOutcome:
		//
		//	knowledge?="knowledge" | skill?="skill" | competence?="competence";
		public ParserRule getRule() { return rule; }

		//knowledge?="knowledge" | skill?="skill" | competence?="competence"
		public Alternatives getAlternatives() { return cAlternatives; }

		//knowledge?="knowledge"
		public Assignment getKnowledgeAssignment_0() { return cKnowledgeAssignment_0; }

		//"knowledge"
		public Keyword getKnowledgeKnowledgeKeyword_0_0() { return cKnowledgeKnowledgeKeyword_0_0; }

		//skill?="skill"
		public Assignment getSkillAssignment_1() { return cSkillAssignment_1; }

		//"skill"
		public Keyword getSkillSkillKeyword_1_0() { return cSkillSkillKeyword_1_0; }

		//competence?="competence"
		public Assignment getCompetenceAssignment_2() { return cCompetenceAssignment_2; }

		//"competence"
		public Keyword getCompetenceCompetenceKeyword_2_0() { return cCompetenceCompetenceKeyword_2_0; }
	}

	public class FeedbackMessagesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeedbackMessages");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeedbackMessagesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeedbackMsgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeedbackMsgsFeedbackParserRuleCall_1_0 = (RuleCall)cFeedbackMsgsAssignment_1.eContents().get(0);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// ******************************* Feedback Messages ******************************* //
		//
		//FeedbackMessages:
		//
		//	"Feedback-messages" feedbackMsgs+=Feedback+ End;
		public ParserRule getRule() { return rule; }

		//"Feedback-messages" feedbackMsgs+=Feedback+ End
		public Group getGroup() { return cGroup; }

		//"Feedback-messages"
		public Keyword getFeedbackMessagesKeyword_0() { return cFeedbackMessagesKeyword_0; }

		//feedbackMsgs+=Feedback+
		public Assignment getFeedbackMsgsAssignment_1() { return cFeedbackMsgsAssignment_1; }

		//Feedback
		public RuleCall getFeedbackMsgsFeedbackParserRuleCall_1_0() { return cFeedbackMsgsFeedbackParserRuleCall_1_0; }

		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}

	public class FeedbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feedback");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cMessageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageSTRINGTerminalRuleCall_1_0 = (RuleCall)cMessageAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeFeedbackParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cFinalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cFinalFinalKeyword_3_0 = (Keyword)cFinalAssignment_3.eContents().get(0);
		
		//Feedback:
		//
		//	name=ID message=STRING type=TypeFeedback? final?="final"?;
		public ParserRule getRule() { return rule; }

		//name=ID message=STRING type=TypeFeedback? final?="final"?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//message=STRING
		public Assignment getMessageAssignment_1() { return cMessageAssignment_1; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_1_0() { return cMessageSTRINGTerminalRuleCall_1_0; }

		//type=TypeFeedback?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeFeedback
		public RuleCall getTypeTypeFeedbackParserRuleCall_2_0() { return cTypeTypeFeedbackParserRuleCall_2_0; }

		//final?="final"?
		public Assignment getFinalAssignment_3() { return cFinalAssignment_3; }

		//"final"
		public Keyword getFinalFinalKeyword_3_0() { return cFinalFinalKeyword_3_0; }
	}

	public class TypeFeedbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeFeedback");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPositiveKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNegativeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNeutralKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBadgeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHintKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//TypeFeedback:
		//
		//	"positive" | "negative" | "neutral" | "badge" | "hint";
		public ParserRule getRule() { return rule; }

		//"positive" | "negative" | "neutral" | "badge" | "hint"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"positive"
		public Keyword getPositiveKeyword_0() { return cPositiveKeyword_0; }

		//"negative"
		public Keyword getNegativeKeyword_1() { return cNegativeKeyword_1; }

		//"neutral"
		public Keyword getNeutralKeyword_2() { return cNeutralKeyword_2; }

		//"badge"
		public Keyword getBadgeKeyword_3() { return cBadgeKeyword_3; }

		//"hint"
		public Keyword getHintKeyword_4() { return cHintKeyword_4; }
	}

	public class EvidenceModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvidenceModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEvidenceModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		private final Assignment cTimerActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimerActionsTimerActionsParserRuleCall_2_0 = (RuleCall)cTimerActionsAssignment_2.eContents().get(0);
		private final Assignment cActionSequenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionSequenceActionSequencesParserRuleCall_3_0 = (RuleCall)cActionSequenceAssignment_3.eContents().get(0);
		private final RuleCall cEndParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// ********************************* Evidence Model ********************************* //
		//
		//EvidenceModel:
		//
		//	"Evidence-model" actions+=Action+ timerActions=TimerActions? actionSequence=ActionSequences? End;
		public ParserRule getRule() { return rule; }

		//"Evidence-model" actions+=Action+ timerActions=TimerActions? actionSequence=ActionSequences? End
		public Group getGroup() { return cGroup; }

		//"Evidence-model"
		public Keyword getEvidenceModelKeyword_0() { return cEvidenceModelKeyword_0; }

		//actions+=Action+
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }

		//Action
		public RuleCall getActionsActionParserRuleCall_1_0() { return cActionsActionParserRuleCall_1_0; }

		//timerActions=TimerActions?
		public Assignment getTimerActionsAssignment_2() { return cTimerActionsAssignment_2; }

		//TimerActions
		public RuleCall getTimerActionsTimerActionsParserRuleCall_2_0() { return cTimerActionsTimerActionsParserRuleCall_2_0; }

		//actionSequence=ActionSequences?
		public Assignment getActionSequenceAssignment_3() { return cActionSequenceAssignment_3; }

		//ActionSequences
		public RuleCall getActionSequenceActionSequencesParserRuleCall_3_0() { return cActionSequenceActionSequencesParserRuleCall_3_0; }

		//End
		public RuleCall getEndParserRuleCall_4() { return cEndParserRuleCall_4; }
	}

	public class ActionSequencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionSequences");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActionSequencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionSequencesActionSequenceParserRuleCall_1_0 = (RuleCall)cActionSequencesAssignment_1.eContents().get(0);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ActionSequences:
		//
		//	"Action-sequence" actionSequences+=ActionSequence End;
		public ParserRule getRule() { return rule; }

		//"Action-sequence" actionSequences+=ActionSequence End
		public Group getGroup() { return cGroup; }

		//"Action-sequence"
		public Keyword getActionSequenceKeyword_0() { return cActionSequenceKeyword_0; }

		//actionSequences+=ActionSequence
		public Assignment getActionSequencesAssignment_1() { return cActionSequencesAssignment_1; }

		//ActionSequence
		public RuleCall getActionSequencesActionSequenceParserRuleCall_1_0() { return cActionSequencesActionSequenceParserRuleCall_1_0; }

		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}

	public class ActionSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAction1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAction1IDTerminalRuleCall_0_0 = (RuleCall)cAction1Assignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBeforeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cBeforeBeforeKeyword_1_0_0 = (Keyword)cBeforeAssignment_1_0.eContents().get(0);
		private final Assignment cAfterAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cAfterAfterKeyword_1_1_0 = (Keyword)cAfterAssignment_1_1.eContents().get(0);
		private final Assignment cAction2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAction2IDTerminalRuleCall_2_0 = (RuleCall)cAction2Assignment_2.eContents().get(0);
		private final Keyword cElseKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSequenceReactionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSequenceReactionsActionReactionParserRuleCall_4_0 = (RuleCall)cSequenceReactionsAssignment_4.eContents().get(0);
		private final RuleCall cEndParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ActionSequence:
		//
		//	action1=ID (before?="before" | after?="after") action2=ID "else" sequenceReactions+=ActionReaction+ End;
		public ParserRule getRule() { return rule; }

		//action1=ID (before?="before" | after?="after") action2=ID "else" sequenceReactions+=ActionReaction+ End
		public Group getGroup() { return cGroup; }

		//action1=ID
		public Assignment getAction1Assignment_0() { return cAction1Assignment_0; }

		//ID
		public RuleCall getAction1IDTerminalRuleCall_0_0() { return cAction1IDTerminalRuleCall_0_0; }

		//before?="before" | after?="after"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//before?="before"
		public Assignment getBeforeAssignment_1_0() { return cBeforeAssignment_1_0; }

		//"before"
		public Keyword getBeforeBeforeKeyword_1_0_0() { return cBeforeBeforeKeyword_1_0_0; }

		//after?="after"
		public Assignment getAfterAssignment_1_1() { return cAfterAssignment_1_1; }

		//"after"
		public Keyword getAfterAfterKeyword_1_1_0() { return cAfterAfterKeyword_1_1_0; }

		//action2=ID
		public Assignment getAction2Assignment_2() { return cAction2Assignment_2; }

		//ID
		public RuleCall getAction2IDTerminalRuleCall_2_0() { return cAction2IDTerminalRuleCall_2_0; }

		//"else"
		public Keyword getElseKeyword_3() { return cElseKeyword_3; }

		//sequenceReactions+=ActionReaction+
		public Assignment getSequenceReactionsAssignment_4() { return cSequenceReactionsAssignment_4; }

		//ActionReaction
		public RuleCall getSequenceReactionsActionReactionParserRuleCall_4_0() { return cSequenceReactionsActionReactionParserRuleCall_4_0; }

		//End
		public RuleCall getEndParserRuleCall_5() { return cEndParserRuleCall_5; }
	}

	public class TimerActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimerActions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimerActionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimerActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimerActionsTimerActionParserRuleCall_1_0 = (RuleCall)cTimerActionsAssignment_1.eContents().get(0);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//TimerActions:
		//
		//	"Timer-actions" timerActions+=TimerAction+ End;
		public ParserRule getRule() { return rule; }

		//"Timer-actions" timerActions+=TimerAction+ End
		public Group getGroup() { return cGroup; }

		//"Timer-actions"
		public Keyword getTimerActionsKeyword_0() { return cTimerActionsKeyword_0; }

		//timerActions+=TimerAction+
		public Assignment getTimerActionsAssignment_1() { return cTimerActionsAssignment_1; }

		//TimerAction
		public RuleCall getTimerActionsTimerActionParserRuleCall_1_0() { return cTimerActionsTimerActionParserRuleCall_1_0; }

		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}

	public class TimerActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimerAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTimingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimingsTimingParserRuleCall_1_0 = (RuleCall)cTimingsAssignment_1.eContents().get(0);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//TimerAction:
		//
		//	name=ID timings+=Timing+ End;
		public ParserRule getRule() { return rule; }

		//name=ID timings+=Timing+ End
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//timings+=Timing+
		public Assignment getTimingsAssignment_1() { return cTimingsAssignment_1; }

		//Timing
		public RuleCall getTimingsTimingParserRuleCall_1_0() { return cTimingsTimingParserRuleCall_1_0; }

		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}

	public class TimingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Timing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cBeforeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cBeforeWithinKeyword_0_0_0 = (Keyword)cBeforeAssignment_0_0.eContents().get(0);
		private final Assignment cAfterAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cAfterAfterKeyword_0_1_0 = (Keyword)cAfterAssignment_0_1.eContents().get(0);
		private final Assignment cLimitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLimitINTTerminalRuleCall_1_0 = (RuleCall)cLimitAssignment_1.eContents().get(0);
		private final Keyword cSecKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTimingReactionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimingReactionsActionReactionParserRuleCall_3_0 = (RuleCall)cTimingReactionsAssignment_3.eContents().get(0);
		private final RuleCall cEndParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Timing:
		//
		//	(before?="within" | after?="after") limit=INT "sec" timingReactions+=ActionReaction+ End;
		public ParserRule getRule() { return rule; }

		//(before?="within" | after?="after") limit=INT "sec" timingReactions+=ActionReaction+ End
		public Group getGroup() { return cGroup; }

		//before?="within" | after?="after"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//before?="within"
		public Assignment getBeforeAssignment_0_0() { return cBeforeAssignment_0_0; }

		//"within"
		public Keyword getBeforeWithinKeyword_0_0_0() { return cBeforeWithinKeyword_0_0_0; }

		//after?="after"
		public Assignment getAfterAssignment_0_1() { return cAfterAssignment_0_1; }

		//"after"
		public Keyword getAfterAfterKeyword_0_1_0() { return cAfterAfterKeyword_0_1_0; }

		//limit=INT
		public Assignment getLimitAssignment_1() { return cLimitAssignment_1; }

		//INT
		public RuleCall getLimitINTTerminalRuleCall_1_0() { return cLimitINTTerminalRuleCall_1_0; }

		//"sec"
		public Keyword getSecKeyword_2() { return cSecKeyword_2; }

		//timingReactions+=ActionReaction+
		public Assignment getTimingReactionsAssignment_3() { return cTimingReactionsAssignment_3; }

		//ActionReaction
		public RuleCall getTimingReactionsActionReactionParserRuleCall_3_0() { return cTimingReactionsActionReactionParserRuleCall_3_0; }

		//End
		public RuleCall getEndParserRuleCall_4() { return cEndParserRuleCall_4; }
	}

	public class ActionReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionReaction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUpdateScoreAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUpdateScoreUpdateScoreParserRuleCall_0_0 = (RuleCall)cUpdateScoreAssignment_0.eContents().get(0);
		private final Assignment cTriggerFeedbackAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTriggerFeedbackTriggerFeedbackParserRuleCall_1_0 = (RuleCall)cTriggerFeedbackAssignment_1.eContents().get(0);
		
		//ActionReaction:
		//
		//	updateScore=UpdateScore | triggerFeedback=TriggerFeedback;
		public ParserRule getRule() { return rule; }

		//updateScore=UpdateScore | triggerFeedback=TriggerFeedback
		public Alternatives getAlternatives() { return cAlternatives; }

		//updateScore=UpdateScore
		public Assignment getUpdateScoreAssignment_0() { return cUpdateScoreAssignment_0; }

		//UpdateScore
		public RuleCall getUpdateScoreUpdateScoreParserRuleCall_0_0() { return cUpdateScoreUpdateScoreParserRuleCall_0_0; }

		//triggerFeedback=TriggerFeedback
		public Assignment getTriggerFeedbackAssignment_1() { return cTriggerFeedbackAssignment_1; }

		//TriggerFeedback
		public RuleCall getTriggerFeedbackTriggerFeedbackParserRuleCall_1_0() { return cTriggerFeedbackTriggerFeedbackParserRuleCall_1_0; }
	}

	public class UpdateScoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateScore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutcomeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOutcomeOutcomeCrossReference_0_0 = (CrossReference)cOutcomeAssignment_0.eContents().get(0);
		private final RuleCall cOutcomeOutcomeIDTerminalRuleCall_0_0_1 = (RuleCall)cOutcomeOutcomeCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPtsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPtsPointParserRuleCall_2_0 = (RuleCall)cPtsAssignment_2.eContents().get(0);
		
		//UpdateScore:
		//
		//	outcome=[Outcome] "->" pts=Point;
		public ParserRule getRule() { return rule; }

		//outcome=[Outcome] "->" pts=Point
		public Group getGroup() { return cGroup; }

		//outcome=[Outcome]
		public Assignment getOutcomeAssignment_0() { return cOutcomeAssignment_0; }

		//[Outcome]
		public CrossReference getOutcomeOutcomeCrossReference_0_0() { return cOutcomeOutcomeCrossReference_0_0; }

		//ID
		public RuleCall getOutcomeOutcomeIDTerminalRuleCall_0_0_1() { return cOutcomeOutcomeIDTerminalRuleCall_0_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//pts=Point
		public Assignment getPtsAssignment_2() { return cPtsAssignment_2; }

		//Point
		public RuleCall getPtsPointParserRuleCall_2_0() { return cPtsPointParserRuleCall_2_0; }
	}

	public class TriggerFeedbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerFeedback");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeedbackAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeedbackFeedbackCrossReference_1_0 = (CrossReference)cFeedbackAssignment_1.eContents().get(0);
		private final RuleCall cFeedbackFeedbackIDTerminalRuleCall_1_0_1 = (RuleCall)cFeedbackFeedbackCrossReference_1_0.eContents().get(1);
		
		//TriggerFeedback:
		//
		//	":" feedback=[Feedback];
		public ParserRule getRule() { return rule; }

		//":" feedback=[Feedback]
		public Group getGroup() { return cGroup; }

		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//feedback=[Feedback]
		public Assignment getFeedbackAssignment_1() { return cFeedbackAssignment_1; }

		//[Feedback]
		public CrossReference getFeedbackFeedbackCrossReference_1_0() { return cFeedbackFeedbackCrossReference_1_0; }

		//ID
		public RuleCall getFeedbackFeedbackIDTerminalRuleCall_1_0_1() { return cFeedbackFeedbackIDTerminalRuleCall_1_0_1; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsParameterParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPointsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPointsPointsParserRuleCall_5_0 = (RuleCall)cPointsAssignment_5.eContents().get(0);
		private final Assignment cReactionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReactionsReactionsParserRuleCall_6_0 = (RuleCall)cReactionsAssignment_6.eContents().get(0);
		private final RuleCall cEndParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Action:
		//
		//	name=ID "(" params+=Parameter ("," params+=Parameter)* ")" points+=Points+ reactions=Reactions? End;
		public ParserRule getRule() { return rule; }

		//name=ID "(" params+=Parameter ("," params+=Parameter)* ")" points+=Points+ reactions=Reactions? End
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//params+=Parameter
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_0() { return cParamsParameterParserRuleCall_2_0; }

		//("," params+=Parameter)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_0() { return cParamsParameterParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//points+=Points+
		public Assignment getPointsAssignment_5() { return cPointsAssignment_5; }

		//Points
		public RuleCall getPointsPointsParserRuleCall_5_0() { return cPointsPointsParserRuleCall_5_0; }

		//reactions=Reactions?
		public Assignment getReactionsAssignment_6() { return cReactionsAssignment_6; }

		//Reactions
		public RuleCall getReactionsReactionsParserRuleCall_6_0() { return cReactionsReactionsParserRuleCall_6_0; }

		//End
		public RuleCall getEndParserRuleCall_7() { return cEndParserRuleCall_7; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//
		//	type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//type=Type name=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class PointsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Points");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cOutcomeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cOutcomeOutcomeCrossReference_0_0_0 = (CrossReference)cOutcomeAssignment_0_0.eContents().get(0);
		private final RuleCall cOutcomeOutcomeIDTerminalRuleCall_0_0_0_1 = (RuleCall)cOutcomeOutcomeCrossReference_0_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPtsPointParserRuleCall_1_0 = (RuleCall)cPtsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOthersAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cOthersOthersKeyword_2_0_0 = (Keyword)cOthersAssignment_2_0.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cParamsParamsParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final RuleCall cEndParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Points:
		//
		//	(outcome=[Outcome] "->")? pts=Point (others?="others" | params+=Params+) End;
		public ParserRule getRule() { return rule; }

		//(outcome=[Outcome] "->")? pts=Point (others?="others" | params+=Params+) End
		public Group getGroup() { return cGroup; }

		//(outcome=[Outcome] "->")?
		public Group getGroup_0() { return cGroup_0; }

		//outcome=[Outcome]
		public Assignment getOutcomeAssignment_0_0() { return cOutcomeAssignment_0_0; }

		//[Outcome]
		public CrossReference getOutcomeOutcomeCrossReference_0_0_0() { return cOutcomeOutcomeCrossReference_0_0_0; }

		//ID
		public RuleCall getOutcomeOutcomeIDTerminalRuleCall_0_0_0_1() { return cOutcomeOutcomeIDTerminalRuleCall_0_0_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }

		//pts=Point
		public Assignment getPtsAssignment_1() { return cPtsAssignment_1; }

		//Point
		public RuleCall getPtsPointParserRuleCall_1_0() { return cPtsPointParserRuleCall_1_0; }

		//others?="others" | params+=Params+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//others?="others"
		public Assignment getOthersAssignment_2_0() { return cOthersAssignment_2_0; }

		//"others"
		public Keyword getOthersOthersKeyword_2_0_0() { return cOthersOthersKeyword_2_0_0; }

		//params+=Params+
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//Params
		public RuleCall getParamsParamsParserRuleCall_2_1_0() { return cParamsParamsParserRuleCall_2_1_0; }

		//End
		public RuleCall getEndParserRuleCall_3() { return cEndParserRuleCall_3; }
	}

	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegativeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegativeHyphenMinusKeyword_0_0 = (Keyword)cNegativeAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Point:
		//
		//	negative?="-"? value=INT;
		public ParserRule getRule() { return rule; }

		//negative?="-"? value=INT
		public Group getGroup() { return cGroup; }

		//negative?="-"?
		public Assignment getNegativeAssignment_0() { return cNegativeAssignment_0; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_0_0() { return cNegativeHyphenMinusKeyword_0_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Sign:
		//
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class ParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Params");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesParamParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesParamParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		
		//Params:
		//
		//	(name=ID ":")? values+=Param ("," values+=Param);
		public ParserRule getRule() { return rule; }

		//(name=ID ":")? values+=Param ("," values+=Param)
		public Group getGroup() { return cGroup; }

		//(name=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//values+=Param
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//Param
		public RuleCall getValuesParamParserRuleCall_1_0() { return cValuesParamParserRuleCall_1_0; }

		//"," values+=Param
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=Param
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//Param
		public RuleCall getValuesParamParserRuleCall_2_1_0() { return cValuesParamParserRuleCall_2_1_0; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOOLParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Param:
		//
		//	INT | FLOAT | STRING | BOOL | ID;
		public ParserRule getRule() { return rule; }

		//INT | FLOAT | STRING | BOOL | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//FLOAT
		public RuleCall getFLOATParserRuleCall_1() { return cFLOATParserRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//BOOL
		public RuleCall getBOOLParserRuleCall_3() { return cBOOLParserRuleCall_3; }

		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }
	}

	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FLOAT:
		//
		//	INT ("." INT);
		public ParserRule getRule() { return rule; }

		//INT ("." INT)
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"." INT
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL:
		//
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class ReactionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reactions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReactionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReactionReactionParserRuleCall_1_0 = (RuleCall)cReactionAssignment_1.eContents().get(0);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Reactions:
		//
		//	"When" reaction+=Reaction+ End;
		public ParserRule getRule() { return rule; }

		//"When" reaction+=Reaction+ End
		public Group getGroup() { return cGroup; }

		//"When"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//reaction+=Reaction+
		public Assignment getReactionAssignment_1() { return cReactionAssignment_1; }

		//Reaction
		public RuleCall getReactionReactionParserRuleCall_1_0() { return cReactionReactionParserRuleCall_1_0; }

		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}

	public class ReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reaction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamsCAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamsCParamConditionParserRuleCall_0_0 = (RuleCall)cParamsCAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPointsCAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPointsCPointsConditionParserRuleCall_1_0_0 = (RuleCall)cPointsCAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFeedbackAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cFeedbackFeedbackCrossReference_1_2_0 = (CrossReference)cFeedbackAssignment_1_2.eContents().get(0);
		private final RuleCall cFeedbackFeedbackIDTerminalRuleCall_1_2_0_1 = (RuleCall)cFeedbackFeedbackCrossReference_1_2_0.eContents().get(1);
		
		//Reaction:
		//
		//	paramsC=ParamCondition | pointsC=PointsCondition ":" feedback=[Feedback];
		public ParserRule getRule() { return rule; }

		//paramsC=ParamCondition | pointsC=PointsCondition ":" feedback=[Feedback]
		public Alternatives getAlternatives() { return cAlternatives; }

		//paramsC=ParamCondition
		public Assignment getParamsCAssignment_0() { return cParamsCAssignment_0; }

		//ParamCondition
		public RuleCall getParamsCParamConditionParserRuleCall_0_0() { return cParamsCParamConditionParserRuleCall_0_0; }

		//pointsC=PointsCondition ":" feedback=[Feedback]
		public Group getGroup_1() { return cGroup_1; }

		//pointsC=PointsCondition
		public Assignment getPointsCAssignment_1_0() { return cPointsCAssignment_1_0; }

		//PointsCondition
		public RuleCall getPointsCPointsConditionParserRuleCall_1_0_0() { return cPointsCPointsConditionParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//feedback=[Feedback]
		public Assignment getFeedbackAssignment_1_2() { return cFeedbackAssignment_1_2; }

		//[Feedback]
		public CrossReference getFeedbackFeedbackCrossReference_1_2_0() { return cFeedbackFeedbackCrossReference_1_2_0; }

		//ID
		public RuleCall getFeedbackFeedbackIDTerminalRuleCall_1_2_0_1() { return cFeedbackFeedbackIDTerminalRuleCall_1_2_0_1; }
	}

	public class ParamConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamCondition");
		private final Assignment cParamsAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParamsParamsCrossReference_0 = (CrossReference)cParamsAssignment.eContents().get(0);
		private final RuleCall cParamsParamsIDTerminalRuleCall_0_1 = (RuleCall)cParamsParamsCrossReference_0.eContents().get(1);
		
		//ParamCondition:
		//
		//	params=[Params];
		public ParserRule getRule() { return rule; }

		//params=[Params]
		public Assignment getParamsAssignment() { return cParamsAssignment; }

		//[Params]
		public CrossReference getParamsParamsCrossReference_0() { return cParamsParamsCrossReference_0; }

		//ID
		public RuleCall getParamsParamsIDTerminalRuleCall_0_1() { return cParamsParamsIDTerminalRuleCall_0_1; }
	}

	public class PointsConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PointsCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyWdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyWdPointsKeyWdParserRuleCall_0_0 = (RuleCall)cKeyWdAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSignAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSignSignParserRuleCall_2_0_0 = (RuleCall)cSignAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValuePointParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PointsCondition:
		//
		//	keyWd=PointsKeyWd "(" (sign=Sign | value=Point) ")";
		public ParserRule getRule() { return rule; }

		//keyWd=PointsKeyWd "(" (sign=Sign | value=Point) ")"
		public Group getGroup() { return cGroup; }

		//keyWd=PointsKeyWd
		public Assignment getKeyWdAssignment_0() { return cKeyWdAssignment_0; }

		//PointsKeyWd
		public RuleCall getKeyWdPointsKeyWdParserRuleCall_0_0() { return cKeyWdPointsKeyWdParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//sign=Sign | value=Point
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//sign=Sign
		public Assignment getSignAssignment_2_0() { return cSignAssignment_2_0; }

		//Sign
		public RuleCall getSignSignParserRuleCall_2_0_0() { return cSignSignParserRuleCall_2_0_0; }

		//value=Point
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Point
		public RuleCall getValuePointParserRuleCall_2_1_0() { return cValuePointParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PointsKeyWdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PointsKeyWd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAnyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PointsKeyWd:
		//
		//	"any" | "all";
		public ParserRule getRule() { return rule; }

		//"any" | "all"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"any"
		public Keyword getAnyKeyword_0() { return cAnyKeyword_0; }

		//"all"
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }
	}

	public class FeedbackModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeedbackModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeedbackModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTriggersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggersTriggerParserRuleCall_1_0 = (RuleCall)cTriggersAssignment_1.eContents().get(0);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// ********************************* Feedback Model ********************************* //
		//
		//FeedbackModel:
		//
		//	"Feedback-model" triggers+=Trigger+ End;
		public ParserRule getRule() { return rule; }

		//"Feedback-model" triggers+=Trigger+ End
		public Group getGroup() { return cGroup; }

		//"Feedback-model"
		public Keyword getFeedbackModelKeyword_0() { return cFeedbackModelKeyword_0; }

		//triggers+=Trigger+
		public Assignment getTriggersAssignment_1() { return cTriggersAssignment_1; }

		//Trigger
		public RuleCall getTriggersTriggerParserRuleCall_1_0() { return cTriggersTriggerParserRuleCall_1_0; }

		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPerfAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPerfOutcomeValueLimitParserRuleCall_0_0 = (RuleCall)cPerfAssignment_0.eContents().get(0);
		private final Assignment cInactivityAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInactivityInactivityLimitParserRuleCall_1_0 = (RuleCall)cInactivityAssignment_1.eContents().get(0);
		
		//Trigger:
		//
		//	perf=OutcomeValueLimit | inactivity=InactivityLimit;
		public ParserRule getRule() { return rule; }

		//perf=OutcomeValueLimit | inactivity=InactivityLimit
		public Alternatives getAlternatives() { return cAlternatives; }

		//perf=OutcomeValueLimit
		public Assignment getPerfAssignment_0() { return cPerfAssignment_0; }

		//OutcomeValueLimit
		public RuleCall getPerfOutcomeValueLimitParserRuleCall_0_0() { return cPerfOutcomeValueLimitParserRuleCall_0_0; }

		//inactivity=InactivityLimit
		public Assignment getInactivityAssignment_1() { return cInactivityAssignment_1; }

		//InactivityLimit
		public RuleCall getInactivityInactivityLimitParserRuleCall_1_0() { return cInactivityInactivityLimitParserRuleCall_1_0; }
	}

	public class OutcomeValueLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutcomeValueLimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutcomeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOutcomeOutcomeCrossReference_0_0 = (CrossReference)cOutcomeAssignment_0.eContents().get(0);
		private final RuleCall cOutcomeOutcomeIDTerminalRuleCall_0_0_1 = (RuleCall)cOutcomeOutcomeCrossReference_0_0.eContents().get(1);
		private final Assignment cSignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignCompSignParserRuleCall_1_0 = (RuleCall)cSignAssignment_1.eContents().get(0);
		private final Assignment cNegativeLimitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNegativeLimitHyphenMinusKeyword_2_0 = (Keyword)cNegativeLimitAssignment_2.eContents().get(0);
		private final Assignment cLimitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLimitINTTerminalRuleCall_3_0 = (RuleCall)cLimitAssignment_3.eContents().get(0);
		private final Assignment cTriggerReactionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTriggerReactionsTriggerFeedbackParserRuleCall_4_0 = (RuleCall)cTriggerReactionsAssignment_4.eContents().get(0);
		
		//OutcomeValueLimit:
		//
		//	outcome=[Outcome] sign=CompSign negativeLimit?="-"? limit=INT triggerReactions+=TriggerFeedback+;
		public ParserRule getRule() { return rule; }

		//outcome=[Outcome] sign=CompSign negativeLimit?="-"? limit=INT triggerReactions+=TriggerFeedback+
		public Group getGroup() { return cGroup; }

		//outcome=[Outcome]
		public Assignment getOutcomeAssignment_0() { return cOutcomeAssignment_0; }

		//[Outcome]
		public CrossReference getOutcomeOutcomeCrossReference_0_0() { return cOutcomeOutcomeCrossReference_0_0; }

		//ID
		public RuleCall getOutcomeOutcomeIDTerminalRuleCall_0_0_1() { return cOutcomeOutcomeIDTerminalRuleCall_0_0_1; }

		//sign=CompSign
		public Assignment getSignAssignment_1() { return cSignAssignment_1; }

		//CompSign
		public RuleCall getSignCompSignParserRuleCall_1_0() { return cSignCompSignParserRuleCall_1_0; }

		//negativeLimit?="-"?
		public Assignment getNegativeLimitAssignment_2() { return cNegativeLimitAssignment_2; }

		//"-"
		public Keyword getNegativeLimitHyphenMinusKeyword_2_0() { return cNegativeLimitHyphenMinusKeyword_2_0; }

		//limit=INT
		public Assignment getLimitAssignment_3() { return cLimitAssignment_3; }

		//INT
		public RuleCall getLimitINTTerminalRuleCall_3_0() { return cLimitINTTerminalRuleCall_3_0; }

		//triggerReactions+=TriggerFeedback+
		public Assignment getTriggerReactionsAssignment_4() { return cTriggerReactionsAssignment_4; }

		//TriggerFeedback
		public RuleCall getTriggerReactionsTriggerFeedbackParserRuleCall_4_0() { return cTriggerReactionsTriggerFeedbackParserRuleCall_4_0; }
	}

	public class CompSignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompSign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CompSign:
		//
		//	"<" | ">";
		public ParserRule getRule() { return rule; }

		//"<" | ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }
	}

	public class InactivityLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InactivityLimit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInactivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSignCompSignParserRuleCall_1_0 = (RuleCall)cSignAssignment_1.eContents().get(0);
		private final Assignment cLimitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLimitINTTerminalRuleCall_2_0 = (RuleCall)cLimitAssignment_2.eContents().get(0);
		private final Keyword cSecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTriggerReactionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTriggerReactionsActionReactionParserRuleCall_4_0 = (RuleCall)cTriggerReactionsAssignment_4.eContents().get(0);
		
		//InactivityLimit:
		//
		//	"inactivity" sign=CompSign limit=INT "sec" triggerReactions+=ActionReaction+;
		public ParserRule getRule() { return rule; }

		//"inactivity" sign=CompSign limit=INT "sec" triggerReactions+=ActionReaction+
		public Group getGroup() { return cGroup; }

		//"inactivity"
		public Keyword getInactivityKeyword_0() { return cInactivityKeyword_0; }

		//sign=CompSign
		public Assignment getSignAssignment_1() { return cSignAssignment_1; }

		//CompSign
		public RuleCall getSignCompSignParserRuleCall_1_0() { return cSignCompSignParserRuleCall_1_0; }

		//limit=INT
		public Assignment getLimitAssignment_2() { return cLimitAssignment_2; }

		//INT
		public RuleCall getLimitINTTerminalRuleCall_2_0() { return cLimitINTTerminalRuleCall_2_0; }

		//"sec"
		public Keyword getSecKeyword_3() { return cSecKeyword_3; }

		//triggerReactions+=ActionReaction+
		public Assignment getTriggerReactionsAssignment_4() { return cTriggerReactionsAssignment_4; }

		//ActionReaction
		public RuleCall getTriggerReactionsActionReactionParserRuleCall_4_0() { return cTriggerReactionsActionReactionParserRuleCall_4_0; }
	}
	
	
	private ModelElements pModel;
	private EndElements pEnd;
	private SeparatorElements pSeparator;
	private TypeElements pType;
	private EnumElements pEnum;
	private GameDescriptionElements pGameDescription;
	private AgeElements pAge;
	private PlayerDescriptionElements pPlayerDescription;
	private CharacteristicElements pCharacteristic;
	private LearningOutcomesElements pLearningOutcomes;
	private OutcomeElements pOutcome;
	private TypeOutcomeElements pTypeOutcome;
	private FeedbackMessagesElements pFeedbackMessages;
	private FeedbackElements pFeedback;
	private TypeFeedbackElements pTypeFeedback;
	private EvidenceModelElements pEvidenceModel;
	private ActionSequencesElements pActionSequences;
	private ActionSequenceElements pActionSequence;
	private TimerActionsElements pTimerActions;
	private TimerActionElements pTimerAction;
	private TimingElements pTiming;
	private ActionReactionElements pActionReaction;
	private UpdateScoreElements pUpdateScore;
	private TriggerFeedbackElements pTriggerFeedback;
	private ActionElements pAction;
	private ParameterElements pParameter;
	private PointsElements pPoints;
	private PointElements pPoint;
	private SignElements pSign;
	private ParamsElements pParams;
	private ParamElements pParam;
	private FLOATElements pFLOAT;
	private BOOLElements pBOOL;
	private ReactionsElements pReactions;
	private ReactionElements pReaction;
	private ParamConditionElements pParamCondition;
	private PointsConditionElements pPointsCondition;
	private PointsKeyWdElements pPointsKeyWd;
	private FeedbackModelElements pFeedbackModel;
	private TriggerElements pTrigger;
	private OutcomeValueLimitElements pOutcomeValueLimit;
	private CompSignElements pCompSign;
	private InactivityLimitElements pInactivityLimit;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EngageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uws.chaudy.Engage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//
	//	game=GameDescription player=PlayerDescription? learningOutcomes=LearningOutcomes feedbackMessages=FeedbackMessages?
	//
	//	evidenceModel=EvidenceModel feedbackModel=FeedbackModel?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//End:
	//
	//	"End";
	public EndElements getEndAccess() {
		return (pEnd != null) ? pEnd : (pEnd = new EndElements());
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}

	//Separator:
	//
	//	":";
	public SeparatorElements getSeparatorAccess() {
		return (pSeparator != null) ? pSeparator : (pSeparator = new SeparatorElements());
	}
	
	public ParserRule getSeparatorRule() {
		return getSeparatorAccess().getRule();
	}

	//Type:
	//
	//	simpleType=("Int" | "Float" | "String" | "Bool" | "Char" | "Text") | enumType=Enum;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Enum:
	//
	//	"Enum" "(" enumValues+=STRING ("," enumValues+=STRING)* ")";
	public EnumElements getEnumAccess() {
		return (pEnum != null) ? pEnum : (pEnum = new EnumElements());
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//// ******************************* Game Description ******************************* //
	//
	//GameDescription:
	//
	//	"Serious-game" "SGname" Separator name=STRING "SGdeveloper" Separator dev=INT ("SGdesc" Separator desc=STRING)?
	//
	//	("SGageRange" Separator ageRange=Age)? ("SGlanguage" Separator lang=ID)? ("SGcountry" Separator country=ID)?
	//
	//	("SGgenre" Separator genre=STRING)? ("SGsubject" Separator subject=STRING)? ("SGpublic" Separator public=BOOL)? End;
	public GameDescriptionElements getGameDescriptionAccess() {
		return (pGameDescription != null) ? pGameDescription : (pGameDescription = new GameDescriptionElements());
	}
	
	public ParserRule getGameDescriptionRule() {
		return getGameDescriptionAccess().getRule();
	}

	//Age:
	//
	//	ageMin=INT "-" ageMax=INT;
	public AgeElements getAgeAccess() {
		return (pAge != null) ? pAge : (pAge = new AgeElements());
	}
	
	public ParserRule getAgeRule() {
		return getAgeAccess().getRule();
	}

	//// ******************************* Player Description ******************************* //
	//
	//PlayerDescription:
	//
	//	"Player" characteristics+=Characteristic+ End;
	public PlayerDescriptionElements getPlayerDescriptionAccess() {
		return (pPlayerDescription != null) ? pPlayerDescription : (pPlayerDescription = new PlayerDescriptionElements());
	}
	
	public ParserRule getPlayerDescriptionRule() {
		return getPlayerDescriptionAccess().getRule();
	}

	//Characteristic:
	//
	//	name=ID Separator type=Type;
	public CharacteristicElements getCharacteristicAccess() {
		return (pCharacteristic != null) ? pCharacteristic : (pCharacteristic = new CharacteristicElements());
	}
	
	public ParserRule getCharacteristicRule() {
		return getCharacteristicAccess().getRule();
	}

	//// ******************************* Learning Outcomes ******************************* //
	//
	//LearningOutcomes:
	//
	//	"Learning-outcomes" outcomes+=Outcome+ End;
	public LearningOutcomesElements getLearningOutcomesAccess() {
		return (pLearningOutcomes != null) ? pLearningOutcomes : (pLearningOutcomes = new LearningOutcomesElements());
	}
	
	public ParserRule getLearningOutcomesRule() {
		return getLearningOutcomesAccess().getRule();
	}

	//Outcome:
	//
	//	name=ID desc=STRING? value=INT? type=TypeOutcome?;
	public OutcomeElements getOutcomeAccess() {
		return (pOutcome != null) ? pOutcome : (pOutcome = new OutcomeElements());
	}
	
	public ParserRule getOutcomeRule() {
		return getOutcomeAccess().getRule();
	}

	//TypeOutcome:
	//
	//	knowledge?="knowledge" | skill?="skill" | competence?="competence";
	public TypeOutcomeElements getTypeOutcomeAccess() {
		return (pTypeOutcome != null) ? pTypeOutcome : (pTypeOutcome = new TypeOutcomeElements());
	}
	
	public ParserRule getTypeOutcomeRule() {
		return getTypeOutcomeAccess().getRule();
	}

	//// ******************************* Feedback Messages ******************************* //
	//
	//FeedbackMessages:
	//
	//	"Feedback-messages" feedbackMsgs+=Feedback+ End;
	public FeedbackMessagesElements getFeedbackMessagesAccess() {
		return (pFeedbackMessages != null) ? pFeedbackMessages : (pFeedbackMessages = new FeedbackMessagesElements());
	}
	
	public ParserRule getFeedbackMessagesRule() {
		return getFeedbackMessagesAccess().getRule();
	}

	//Feedback:
	//
	//	name=ID message=STRING type=TypeFeedback? final?="final"?;
	public FeedbackElements getFeedbackAccess() {
		return (pFeedback != null) ? pFeedback : (pFeedback = new FeedbackElements());
	}
	
	public ParserRule getFeedbackRule() {
		return getFeedbackAccess().getRule();
	}

	//TypeFeedback:
	//
	//	"positive" | "negative" | "neutral" | "badge" | "hint";
	public TypeFeedbackElements getTypeFeedbackAccess() {
		return (pTypeFeedback != null) ? pTypeFeedback : (pTypeFeedback = new TypeFeedbackElements());
	}
	
	public ParserRule getTypeFeedbackRule() {
		return getTypeFeedbackAccess().getRule();
	}

	//// ********************************* Evidence Model ********************************* //
	//
	//EvidenceModel:
	//
	//	"Evidence-model" actions+=Action+ timerActions=TimerActions? actionSequence=ActionSequences? End;
	public EvidenceModelElements getEvidenceModelAccess() {
		return (pEvidenceModel != null) ? pEvidenceModel : (pEvidenceModel = new EvidenceModelElements());
	}
	
	public ParserRule getEvidenceModelRule() {
		return getEvidenceModelAccess().getRule();
	}

	//ActionSequences:
	//
	//	"Action-sequence" actionSequences+=ActionSequence End;
	public ActionSequencesElements getActionSequencesAccess() {
		return (pActionSequences != null) ? pActionSequences : (pActionSequences = new ActionSequencesElements());
	}
	
	public ParserRule getActionSequencesRule() {
		return getActionSequencesAccess().getRule();
	}

	//ActionSequence:
	//
	//	action1=ID (before?="before" | after?="after") action2=ID "else" sequenceReactions+=ActionReaction+ End;
	public ActionSequenceElements getActionSequenceAccess() {
		return (pActionSequence != null) ? pActionSequence : (pActionSequence = new ActionSequenceElements());
	}
	
	public ParserRule getActionSequenceRule() {
		return getActionSequenceAccess().getRule();
	}

	//TimerActions:
	//
	//	"Timer-actions" timerActions+=TimerAction+ End;
	public TimerActionsElements getTimerActionsAccess() {
		return (pTimerActions != null) ? pTimerActions : (pTimerActions = new TimerActionsElements());
	}
	
	public ParserRule getTimerActionsRule() {
		return getTimerActionsAccess().getRule();
	}

	//TimerAction:
	//
	//	name=ID timings+=Timing+ End;
	public TimerActionElements getTimerActionAccess() {
		return (pTimerAction != null) ? pTimerAction : (pTimerAction = new TimerActionElements());
	}
	
	public ParserRule getTimerActionRule() {
		return getTimerActionAccess().getRule();
	}

	//Timing:
	//
	//	(before?="within" | after?="after") limit=INT "sec" timingReactions+=ActionReaction+ End;
	public TimingElements getTimingAccess() {
		return (pTiming != null) ? pTiming : (pTiming = new TimingElements());
	}
	
	public ParserRule getTimingRule() {
		return getTimingAccess().getRule();
	}

	//ActionReaction:
	//
	//	updateScore=UpdateScore | triggerFeedback=TriggerFeedback;
	public ActionReactionElements getActionReactionAccess() {
		return (pActionReaction != null) ? pActionReaction : (pActionReaction = new ActionReactionElements());
	}
	
	public ParserRule getActionReactionRule() {
		return getActionReactionAccess().getRule();
	}

	//UpdateScore:
	//
	//	outcome=[Outcome] "->" pts=Point;
	public UpdateScoreElements getUpdateScoreAccess() {
		return (pUpdateScore != null) ? pUpdateScore : (pUpdateScore = new UpdateScoreElements());
	}
	
	public ParserRule getUpdateScoreRule() {
		return getUpdateScoreAccess().getRule();
	}

	//TriggerFeedback:
	//
	//	":" feedback=[Feedback];
	public TriggerFeedbackElements getTriggerFeedbackAccess() {
		return (pTriggerFeedback != null) ? pTriggerFeedback : (pTriggerFeedback = new TriggerFeedbackElements());
	}
	
	public ParserRule getTriggerFeedbackRule() {
		return getTriggerFeedbackAccess().getRule();
	}

	//Action:
	//
	//	name=ID "(" params+=Parameter ("," params+=Parameter)* ")" points+=Points+ reactions=Reactions? End;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Parameter:
	//
	//	type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Points:
	//
	//	(outcome=[Outcome] "->")? pts=Point (others?="others" | params+=Params+) End;
	public PointsElements getPointsAccess() {
		return (pPoints != null) ? pPoints : (pPoints = new PointsElements());
	}
	
	public ParserRule getPointsRule() {
		return getPointsAccess().getRule();
	}

	//Point:
	//
	//	negative?="-"? value=INT;
	public PointElements getPointAccess() {
		return (pPoint != null) ? pPoint : (pPoint = new PointElements());
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}

	//Sign:
	//
	//	"+" | "-";
	public SignElements getSignAccess() {
		return (pSign != null) ? pSign : (pSign = new SignElements());
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}

	//Params:
	//
	//	(name=ID ":")? values+=Param ("," values+=Param);
	public ParamsElements getParamsAccess() {
		return (pParams != null) ? pParams : (pParams = new ParamsElements());
	}
	
	public ParserRule getParamsRule() {
		return getParamsAccess().getRule();
	}

	//Param:
	//
	//	INT | FLOAT | STRING | BOOL | ID;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//FLOAT:
	//
	//	INT ("." INT);
	public FLOATElements getFLOATAccess() {
		return (pFLOAT != null) ? pFLOAT : (pFLOAT = new FLOATElements());
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}

	//BOOL:
	//
	//	"true" | "false";
	public BOOLElements getBOOLAccess() {
		return (pBOOL != null) ? pBOOL : (pBOOL = new BOOLElements());
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//Reactions:
	//
	//	"When" reaction+=Reaction+ End;
	public ReactionsElements getReactionsAccess() {
		return (pReactions != null) ? pReactions : (pReactions = new ReactionsElements());
	}
	
	public ParserRule getReactionsRule() {
		return getReactionsAccess().getRule();
	}

	//Reaction:
	//
	//	paramsC=ParamCondition | pointsC=PointsCondition ":" feedback=[Feedback];
	public ReactionElements getReactionAccess() {
		return (pReaction != null) ? pReaction : (pReaction = new ReactionElements());
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}

	//ParamCondition:
	//
	//	params=[Params];
	public ParamConditionElements getParamConditionAccess() {
		return (pParamCondition != null) ? pParamCondition : (pParamCondition = new ParamConditionElements());
	}
	
	public ParserRule getParamConditionRule() {
		return getParamConditionAccess().getRule();
	}

	//PointsCondition:
	//
	//	keyWd=PointsKeyWd "(" (sign=Sign | value=Point) ")";
	public PointsConditionElements getPointsConditionAccess() {
		return (pPointsCondition != null) ? pPointsCondition : (pPointsCondition = new PointsConditionElements());
	}
	
	public ParserRule getPointsConditionRule() {
		return getPointsConditionAccess().getRule();
	}

	//PointsKeyWd:
	//
	//	"any" | "all";
	public PointsKeyWdElements getPointsKeyWdAccess() {
		return (pPointsKeyWd != null) ? pPointsKeyWd : (pPointsKeyWd = new PointsKeyWdElements());
	}
	
	public ParserRule getPointsKeyWdRule() {
		return getPointsKeyWdAccess().getRule();
	}

	//// ********************************* Feedback Model ********************************* //
	//
	//FeedbackModel:
	//
	//	"Feedback-model" triggers+=Trigger+ End;
	public FeedbackModelElements getFeedbackModelAccess() {
		return (pFeedbackModel != null) ? pFeedbackModel : (pFeedbackModel = new FeedbackModelElements());
	}
	
	public ParserRule getFeedbackModelRule() {
		return getFeedbackModelAccess().getRule();
	}

	//Trigger:
	//
	//	perf=OutcomeValueLimit | inactivity=InactivityLimit;
	public TriggerElements getTriggerAccess() {
		return (pTrigger != null) ? pTrigger : (pTrigger = new TriggerElements());
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//OutcomeValueLimit:
	//
	//	outcome=[Outcome] sign=CompSign negativeLimit?="-"? limit=INT triggerReactions+=TriggerFeedback+;
	public OutcomeValueLimitElements getOutcomeValueLimitAccess() {
		return (pOutcomeValueLimit != null) ? pOutcomeValueLimit : (pOutcomeValueLimit = new OutcomeValueLimitElements());
	}
	
	public ParserRule getOutcomeValueLimitRule() {
		return getOutcomeValueLimitAccess().getRule();
	}

	//CompSign:
	//
	//	"<" | ">";
	public CompSignElements getCompSignAccess() {
		return (pCompSign != null) ? pCompSign : (pCompSign = new CompSignElements());
	}
	
	public ParserRule getCompSignRule() {
		return getCompSignAccess().getRule();
	}

	//InactivityLimit:
	//
	//	"inactivity" sign=CompSign limit=INT "sec" triggerReactions+=ActionReaction+;
	public InactivityLimitElements getInactivityLimitAccess() {
		return (pInactivityLimit != null) ? pInactivityLimit : (pInactivityLimit = new InactivityLimitElements());
	}
	
	public ParserRule getInactivityLimitRule() {
		return getInactivityLimitAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
