/*
 * generated by Xtext
 */
package uws.chaudy.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import uws.chaudy.engage.Model
import uws.chaudy.engage.GameDescription
import uws.chaudy.engage.PlayerDescription
import uws.chaudy.engage.LearningOutcomes
import uws.chaudy.engage.FeedbackMessages
import uws.chaudy.engage.EvidenceModel
import uws.chaudy.engage.FeedbackModel


class EngageGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		fsa.generateFile("DSL.json",  toJsonCode(resource.contents.head as Model));
	}
	
	def toJsonCode(Model model)'''
	{
		«model.game.compile»
		«IF model.player != null »«model.player.compile»«ENDIF»
		«model.learningOutcomes.compile(model)»
		«IF model.feedbackMessages != null »«model.feedbackMessages.compile»«ENDIF»
		«model.evidenceModel.compile(model)»
		«IF model.feedbackModel != null »«model.feedbackModel.compile»«ENDIF»
	}
    '''
    
    def compile (GameDescription sg) '''
    "seriousGame" : {
    	"name" : "«sg.name»"«IF sg.desc != null» ,
    	"description" : "«sg.desc»"«ENDIF»«IF sg.ageRange != null», 
    	"ageMin" : «sg.ageRange.ageMin» , 
    	"ageMax" : «sg.ageRange.ageMax» «ENDIF»«IF sg.lang != null», 
    	"lang" : "«sg.lang»" «ENDIF»«IF sg.country != null», 
    	"country" : "«sg.country»" «ENDIF»«IF sg.genre != null», 
    	"genre" : "«sg.genre»" «ENDIF»«IF sg.subject != null», 
    	"subject" : "«sg.subject»" «ENDIF»
    },
    '''
    
    def compile (PlayerDescription player) '''
    "player" : [    	
    	«FOR c : player.characteristics »
		    {
		    	"name" : "«c.name»",
		    	"type" : "«IF c.type.simpleType != null»«c.type.simpleType»«ELSE»«c.type.enumType.toString»«ENDIF»"
		    }«IF player.characteristics.last != c», «ENDIF»
		«ENDFOR»
    ],
    '''
    
    def compile (LearningOutcomes los, Model model) '''
    "learningOutcomes" : {
    	«FOR lo : los.outcomes »
		    "«lo.name»" : {
		    	«IF lo.desc != null»"desc" : "«lo.desc»" «ENDIF», 
		    	"value" : «lo.value»,
		    	"feedbackTriggered" : [
		    	«FOR f : model.feedbackModel.triggers »
		    		«IF f.perf != null»«IF f.perf.outcome == lo»
		    		{
		    			"limit" : «IF f.perf.negativeLimit»-«ENDIF»«f.perf.limit»,
		    			"sign" : "«f.perf.sign»",
		    			"feedback" :  ["«FOR t : f.perf.triggerReactions»«t.feedback.name»«ENDFOR»"]
		    		}«IF model.feedbackModel.triggers.last != f», «ENDIF»
		    		«ENDIF»«ENDIF»
		    	«ENDFOR»
		    	]
		    }«IF los.outcomes.last != lo», «ENDIF»
		«ENDFOR»
    },
    '''

	def compile (FeedbackMessages feedback) '''
	"feedback" : [
		«FOR f : feedback.feedbackMsgs »
		    "«f.name»" : {
		    	"message" : "«f.message»"«IF f.type != null», 
		    	"type" : "«f.type»"«ENDIF»«IF f.final», 
		    	"final" : "true"«ENDIF»
		    	
		    }«IF feedback.feedbackMsgs.last != f», «ENDIF»
		«ENDFOR»
	],
	'''

	def compile (EvidenceModel actions, Model model) '''
	"evidenceModel" : [
		«FOR a : actions.actions»
		«FOR assessment : a.points»
		{
			"action" : "«a.name»",
			"params" : {
				«FOR p : a.params»
				"«p.name»" : "«IF p.type.simpleType != null»«p.type.simpleType»«ELSE»«p.type.enumType.toString»«ENDIF»"«IF a.params.last != p», «ENDIF»
				«ENDFOR»
			},
			«IF assessment.others»
			"else" : "true",
			«ELSE»
			"values" : [
				«FOR p : assessment.params»
				{
					«FOR value : p.values»
					"«a.params.get(p.values.indexOf(value)).name»" : «IF a.params.get(p.values.indexOf(value)).type.simpleType != null 
						&& (a.params.get(p.values.indexOf(value)).type.simpleType == 'Int' 
						|| a.params.get(p.values.indexOf(value)).type.simpleType == 'Float') »«value»«ELSE»"«value»"«ENDIF»
					«ENDFOR»
				}«IF assessment.params.last != p», «ENDIF»
				«ENDFOR»
			],
			«ENDIF»
			"mark" : {
				"learningOutcome" : "«IF assessment.outcome != null»«assessment.outcome.name»«ELSE»«model.learningOutcomes.outcomes.get(0).name»«ENDIF»",
				"mark" : «IF assessment.pts.negative»-«ENDIF»«assessment.pts.value»
			},
			"feedback" : [
			«IF a.reactions != null»
				«FOR r : a.reactions.reaction»
				«IF r.pointsC != null && r.pointsC.keyWd == "any"»
					«IF r.pointsC.sign != null»
					«IF (r.pointsC.sign == '+' && !assessment.pts.negative) || 
						(r.pointsC.sign == '-' && assessment.pts.negative) »
						"«r.feedback.name»"«IF a.reactions.reaction.last != r», «ENDIF»
					«ENDIF»
					«ELSE»
					«IF (r.pointsC.value == assessment.pts) »
						"«r.feedback.name»"«IF a.reactions.reaction.last != r», «ENDIF»
					«ENDIF»
					«ENDIF»
				«ENDIF»
				«ENDFOR»
			«ENDIF»
			]
		}«IF a.points.last != assessment && actions.actions.last != a », «ENDIF»		
		«ENDFOR»
		«ENDFOR»
	]«IF model.feedbackModel != null »,«ENDIF»
	'''

	def compile (FeedbackModel feedbackModel) '''
	"inactivityFeedback" : [
		«FOR i : feedbackModel.triggers»
		«IF i.inactivity != null»
		{
			"limit" : «i.inactivity.limit»,
			"sign" : "«i.inactivity.sign»",
			"feedback" : [«FOR t : i.inactivity.triggerReactions»«IF t.triggerFeedback != null» «t.triggerFeedback.feedback.name» «ENDIF»«ENDFOR»]
		}«IF feedbackModel.triggers.last != i», «ENDIF»
		«ENDIF»
		«ENDFOR»
	]
	'''
}

