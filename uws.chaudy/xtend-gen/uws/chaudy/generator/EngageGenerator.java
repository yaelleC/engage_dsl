/**
 * generated by Xtext
 */
package uws.chaudy.generator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import uws.chaudy.engage.EvidenceModel;
import uws.chaudy.engage.FeedbackMessages;
import uws.chaudy.engage.FeedbackModel;
import uws.chaudy.engage.GameDescription;
import uws.chaudy.engage.LearningOutcomes;
import uws.chaudy.engage.Model;
import uws.chaudy.engage.PlayerDescription;

@SuppressWarnings("all")
public class EngageGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    CharSequence _jsonCode = this.toJsonCode(((Model) _head));
    fsa.generateFile("DSL.json", _jsonCode);
  }
  
  public CharSequence toJsonCode(final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�model.game.compile�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�IF model.player != null ��model.player.compile��ENDIF�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�model.learningOutcomes.compile(model)�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�IF model.feedbackMessages != null ��model.feedbackMessages.compile��ENDIF�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�model.evidenceModel.compile(model)�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�IF model.feedbackModel != null ��model.feedbackModel.compile��ENDIF�");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final GameDescription sg) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"seriousGame\" : {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"name\" : \"�sg.name�\"�IF sg.desc != null� ,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"description\" : \"�sg.desc�\"�ENDIF��IF sg.ageRange != null�, ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"ageMin\" : �sg.ageRange.ageMin� , ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"ageMax\" : �sg.ageRange.ageMax� �ENDIF��IF sg.lang != null�, ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"lang\" : \"�sg.lang�\" �ENDIF��IF sg.country != null�, ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"country\" : \"�sg.country�\" �ENDIF��IF sg.genre != null�, ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"genre\" : \"�sg.genre�\" �ENDIF��IF sg.subject != null�, ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"subject\" : \"�sg.subject�\" �ENDIF�");
    _builder.newLine();
    _builder.append("},");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final PlayerDescription player) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    ");
    _builder.append("\"player\" : [    \t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("�FOR c : player.characteristics �");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"name\" : \"�c.name�\",");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"type\" : \"�IF c.type.simpleType != null��c.type.simpleType��ELSE��c.type.enumType.toString��ENDIF�\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}�IF player.characteristics.last != c�, �ENDIF�");
    _builder.newLine();
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("],");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final LearningOutcomes los, final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("    ");
    _builder.append("\"learningOutcomes\" : {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("�FOR lo : los.outcomes �");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("\"�lo.name�\" : {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("�IF lo.desc != null�\"desc\" : \"�lo.desc�\" �ENDIF�, ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"value\" : �lo.value�,");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"feedbackTriggered\" : [");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("�FOR f : model.feedbackModel.triggers �");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("�IF f.perf != null��IF f.perf.outcome == lo�");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("\"limit\" : �IF f.perf.negativeLimit�-�ENDIF��f.perf.limit�,");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("\"sign\" : \"�f.perf.sign�\",");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("\"feedback\" :  [\"�FOR t : f.perf.triggerReactions��t.feedback.name��ENDFOR�\"]");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("}�IF model.feedbackModel.triggers.last != f�, �ENDIF�");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("�ENDIF��ENDIF�");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}�IF los.outcomes.last != lo�, �ENDIF�");
    _builder.newLine();
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("},");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final FeedbackMessages feedback) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"feedback\" : [");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR f : feedback.feedbackMsgs �");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("\"�f.name�\" : {");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("\"message\" : \"�f.message�\"�IF f.type != null�, ");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("\"type\" : \"�f.type�\"�ENDIF��IF f.final�, ");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("\"final\" : \"true\"�ENDIF�");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}�IF feedback.feedbackMsgs.last != f�, �ENDIF�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("],");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final EvidenceModel actions, final Model model) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"evidenceModel\" : [");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR a : actions.actions�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR assessment : a.points�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"action\" : \"�a.name�\",");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"params\" : {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�FOR p : a.params�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"�p.name�\" : \"�IF p.type.simpleType != null��p.type.simpleType��ELSE��p.type.enumType.toString��ENDIF�\"�IF a.params.last != p�, �ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�IF assessment.others�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"else\" : \"true\",");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"values\" : [");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�FOR p : assessment.params�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�FOR value : p.values�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("\"�a.params.get(p.values.indexOf(value)).name�\" : �IF a.params.get(p.values.indexOf(value)).type.simpleType != null ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("&& (a.params.get(p.values.indexOf(value)).type.simpleType == \'Int\' ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("|| a.params.get(p.values.indexOf(value)).type.simpleType == \'Float\') ��value��ELSE�\"�value�\"�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}�IF assessment.params.last != p�, �ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("],");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"mark\" : {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"learningOutcome\" : \"�IF assessment.outcome != null��assessment.outcome.name��ELSE��model.learningOutcomes.outcomes.get(0).name��ENDIF�\",");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("\"mark\" : �IF assessment.pts.negative�-�ENDIF��assessment.pts.value�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"feedback\" : [");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�IF a.reactions != null�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�FOR r : a.reactions.reaction�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�IF r.pointsC != null && r.pointsC.keyWd == \"any\"�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�IF r.pointsC.sign != null�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�IF (r.pointsC.sign == \'+\' && !assessment.pts.negative) || ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("(r.pointsC.sign == \'-\' && assessment.pts.negative) �");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"�r.feedback.name�\"�IF a.reactions.reaction.last != r�, �ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ELSE�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�IF (r.pointsC.value == assessment.pts) �");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("\"�r.feedback.name�\"�IF a.reactions.reaction.last != r�, �ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}�IF a.points.last != assessment && actions.actions.last != a �, �ENDIF�\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("]�IF model.feedbackModel != null �,�ENDIF�");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final FeedbackModel feedbackModel) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"inactivityFeedback\" : [");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�FOR i : feedbackModel.triggers�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�IF i.inactivity != null�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"limit\" : �i.inactivity.limit�,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"sign\" : \"�i.inactivity.sign�\",");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"feedback\" : [�FOR t : i.inactivity.triggerReactions��IF t.triggerFeedback != null� �t.triggerFeedback.feedback.name� �ENDIF��ENDFOR�]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}�IF feedbackModel.triggers.last != i�, �ENDIF�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDIF�");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("�ENDFOR�");
    _builder.newLine();
    _builder.append("]");
    _builder.newLine();
    return _builder;
  }
}
